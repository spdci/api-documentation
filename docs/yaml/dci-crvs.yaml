openapi: 3.0.3
info:
  title: CRVS APIs
  description: 'The CRVS and SP system should implement following APIs explained in Search API, Event subscription, Event Notification section'
  version: 0.0.1
servers:
  - description: CRVS registry interoperability layer endpoint
    url: https://localhost:8081/

tags:
  - name: Search API
    description: '' 
  - name: CRVS Query APIs
    description: 'This api will query CRVS interoperability layer for supported checks'
  - name: Event subscription
    description: 'The event subscription APIs facilate to get notification when any event happens in crvs registry, The client application meed to register for each event seperately with provided client id and client secret'
  - name: Event notification(To be implemented by subscriber)
    description: 'The event notification api will receive events from registry, this end points to be implemented by event subscriber'
  - name: Request status checking API 
    description: ''

paths:
  /v1/search:
    post:
      tags:
        - Search API
      summary: To perform search operation in registry
      description: The Search operation perfromed for registry 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Search request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'          
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
      security:
        - spmis_auth:
            - read:search
  /v1/on-search:
    post:
      tags:
        - Search API 
      summary: Search request call back, this end point to be implemented at SP system or any system which retieving data from registry
      description: The requester will pass information submitted in search and if response prepared then it will send content
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      requestBody:
        description: Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchResponse'
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 

      security:
        - spmis_auth:
            - read:search
  /crvs/query:
    get:
      tags:
        - CRVS Query APIs 
      summary: Get list of supported query or checks by registry
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                example: ["IS_ALIVE", "IS_MARRIED"]
                items:
                  type: string
      security:
        - spmis_auth:
            - read:eligibity
    post:
      tags:
        - CRVS Query APIs 
      summary: 'The CRVS query API will request data to registry in that which boolean operation expected by requester'
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'     
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'     
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
             
      security:
        - spmis_auth:
            - read:relationships
  /subscription-list:
    get:
      tags:
        - Event subscription 
      summary: Get list of supported events in registry
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      description: ''
      operationId: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                example: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
                items:
                  type: string         
      security:
        - spmis_auth:
            - read:eligibity
  /subscribe:
    post:
      tags:
        - Event subscription  
      summary: To subscribe for specific events
      description: Response will contain details of subscription
      operationId: ''
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'     
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'     
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
             
      security:
        - spmis_auth:
            - read:relationships
  /unsubscribe:
    post:
      tags:
        - Event subscription  
      summary: To un-subscribe for events
      description: ''
      operationId: ''
      requestBody:
        description: 'Request to un-subscribe'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnSubscribeRequest'     
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnSubscribeResponse'     
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'             
      security:
        - spmis_auth:
            - read:relationships
  /notify:
    post:
      tags:
        - Event notification(To be implemented by subscriber)
      summary: The notify end point to be implemented at subscriber system. The registry will send event data on this end point.
      description: ''
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventNotificationRequest'     
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'     
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'                 
      security:
        - spmis_auth:
            - read:relationships
  /status:
    post:
      tags:
        - Request status checking API 
      summary: The SP system will send transaction id of request to check status or request
      description: ''
      operationId: ''
      requestBody:
        description: 'Request to un-subscribe'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestStatusCheckRequest'     
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestStatusCheckResponse'     
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'             
      security:
        - spmis_auth:
            - read:relationships
components:
  responses:
        '102':
          description: Processing 
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse400' 
                
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse401' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse403' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse404' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse405'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse422' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse500' 
  parameters:
    authorization:
      name: Authorization
      in: header
      required: true
      description: Access token which was issued after successful login with gateway auth server.
      schema:
        type: string
        example: Bearer <...>        
    version:
      in: header
      name: x-api-version
      schema:
        type: string
        example: "1.0.0"
      required: false
      description: If not provided use latest api version as default
    x-timestamp:
      in: header
      name: timestamp
      schema:
        type: string
        example: "2022-12-04T18:01:07+00:00"
      required: true
      description: Timestamp of request when it was sent , ideally it should be GMT
    x-hmac:
      in: header
      name: x-hmac
      schema:
        type: string
        example: "bd4a82cd319ababe57d0a822049ae8985029f82237509d3f091c82cbc7a6945c"
      required: true
      description: Signature created in combination of {payload}+{x-timestamp:}+{x-sender-id}.This is usually encrypted string using HMAC-SHA-256 algorithm with the private key.
    x-registry-type:
      in: header
      name: x-registry-type
      schema:
        type: string
        enum: ['x-crvs']
      required: true
      description: This param used to decide which service to be called to retrieve data
    x-sender-id:
      in: header
      name: x-sender-id
      schema:
        type: string
        example: "SP_CRVS_2022"
      required: true
      description: Information about requester , it may be some code of SP system
    x-message-id:
      in: header
      name: x-message-id
      schema:
        type: string
        format: uuid
        example: ''
      required: true
      description: UUID string to be sent in request header for tracking of request
    x-async:
      in: header
      name: x-async
      schema:
        type: string
        example: true
      required: true
      description: Async param indicate that response to be sent immediate or in call back, if _true_ send data in response if _false_ just return HTTP status 202
    x-callbackendpoint:
      in: header
      name: x-callbackendpoint
      schema:
        type: string
        example: "https://senderhost/callback/on-disburse"
      required: false
      description: If async response requested then this param to be supplied for receiving data in SP system, this is usually endpoint active in SP env
  schemas:
    BaseRequestParames:
      type: object
      properties:
        request_id:
          type: string
          example: ''
    SearchRequest:
      type: array
      items:
        type: object
        anyOf:
          - $ref: '#/components/schemas/SearchRequestObject'
    SearchRequestObject:
      allOf:
        - $ref: '#/components/schemas/BaseRequestParames'
      type: object
      properties:
        identifiers:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Identifier'
        demographic:
          $ref : '#/components/schemas/SearchCriteria'
        custom_query:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/NameField'
              - $ref: '#/components/schemas/ExpressionAnd'
              - $ref: '#/components/schemas/Repositories'
        sortby:
          $ref: '#/components/schemas/Sort'
        pagination:
          type: object
          properties:
            page_size:
              type: number
              example: 10
            page_number:
              type: number
              example: 5  

    SearchCriteria:
      type: object
      properties:
        name:
          type: string
          example: ''
        given_name:
          type: string
          example: ''
        family_name:
          type: string
          example: ''
        middle_name:
          type: string
          example: ''
        gender:
          type: string
          example: ''
        birthdate:
          type: string
          example: ''
        place_of_birth:
          type: string
          example: ''
        status:
          type: string
          example: ''
        nationality:
          type: string
          example: ''
        attributes:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Attribute'
            
    Attribute:
      type: object
      properties:
        name:
          type: string
          example: 'attribute name'
        value:
          type: string
          example: 'attribute value'

    ExpressionAnd:
      type: object
      properties:
        expression:
          type: string
          enum: [and]
 
    NameField:
      description: 'Search by name'        
      allOf: 
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'firstname'
              enum: ['firstname']
            operator:
              $ref: '#/components/schemas/FieldOperatorAnd'
            value: 
              type: string
              example: "john"
              description: 'Search by firstname'
 
    Repositories:
      allOf: 
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: ''
              enum: ['repository_type']
            operator:
              $ref: '#/components/schemas/FieldOperatorAnd'
            value: 
              type: string
              example: ""
              enum: ['Birth', 'Death', 'Marriage']
              description: 'Search by repository_type type'
 
    FieldOperatorAnd:
      type: string
      enum:
        - and
 
    Sort:
      type: object
      properties:
        fieldname:
          type: string
          enum: [firstname,dob]
        order:
          type: string
          enum: ["asc","desc"]
    EventResponse:
      type: object
      properties:
        event_status:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BaseResponse'

    BaseResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['success','failure']
          example: ''
        return_message:
          type: string
          example: ''
        correlation_id:
          type: string
          example: ''
          description: The request id will be returned in response as correlation_id
    ApiResponse:
      type: object
      properties:
        success:
          type: string
        return_message:
          type: string
        error_code:
          type: string
        transaction_id:
          type: string
          example: ''
          description: The transaction_id received in request
        correlation_id:
          type: string
          example: ''
          description: The request id will be returned in response as correlation_id
        data: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/CRVSSearchByMRNResponse'
              - $ref: '#/components/schemas/CRVSSearchByBRNResponse'
              - $ref: '#/components/schemas/CRVSSearchByDRNResponse'
    SearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SearchResponseObjectArray'
    SearchResponseObjectArray:
      type: object
      properties:
        transaction_id:
          type: string
          example: ''
          description: The transaction_id received in request
        search_data: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SearchResponseObject'
    SearchResponseObject:
      type: object
      properties:
        transaction_id:
          type: string
          example: ''
          description: The transaction_id received in request
        identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          $ref : '#/components/schemas/DateObject'
        date_of_birth:
          $ref : '#/components/schemas/DateObject'
        date_of_death:
          $ref : '#/components/schemas/DateObject'
        gender:
          type: string
          example: '1'
          enum: ['1|male','2|female','3|transgender']
    HumanName:
      type: object
      properties:
        suffix:
          type: string
          example: ''
        prefix:
          type: string
          example: ''
        first_name:
          type: string
          example: ''
        middle_name:
          type: string
          example: ''
        last_name:
          type: string
          example: ''
    EventNotificationRequest:
      type: object
      properties:
        success:
          type: string
        return_message:
          type: string
        error_code:
          type: string
        corellation_id:
          type: string
          example: ''
          description: The corellation_id received in request
        data: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BirthRegistrationEventInfo'
              - $ref: '#/components/schemas/MarriageRegistrationEventInfo'
              - $ref: '#/components/schemas/DeathRegistrationEventInfo'          
    BirthRegistrationEventInfo:
      type: object
      properties:
        event_code:
          type: string
          example: ''
          enum: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
        transaction_id:
          type: string
          example: ''
          description: The transaction_id received in request
        event_data:
          $ref : '#/components/schemas/CRVSSearchByBRNResponse'
    MarriageRegistrationEventInfo:
      type: object
      properties:
        event_code:
          type: string
          example: ''
          enum: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
        transaction_id:
          type: string
          example: ''
          description: The transaction_id received in request
        event_data:
          $ref : '#/components/schemas/CRVSSearchByMRNResponse'    
    DeathRegistrationEventInfo:
      type: object
      properties:
        event_code:
          type: string
          example: ''
          enum: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
        transaction_id:
          type: string
          example: ''
          description: The transaction_id received in request
        event_data:
          $ref : '#/components/schemas/CRVSSearchByDRNResponse'    

    
    
    CRVSSearchByMRNResponse:
      type: object
      properties:
        groom_identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        groom_name:
          $ref: '#/components/schemas/HumanName'
        groom_father_name:
          $ref: '#/components/schemas/HumanName'
        groom_mother_name:
          $ref: '#/components/schemas/HumanName'
        groom_nationality:
          type: string
          example: 'Dominican'
        groom_date_of_birth:
          type: string
          example: '12/05/1983'        
        groom_marital_status:
          type: string
          example: ''
          enum: [unmarried,divorced,widowed]
        bride_identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        bride_name:
          $ref: '#/components/schemas/HumanName'
        bride_father_name:
          $ref: '#/components/schemas/HumanName'
        bride_mother_name:
          $ref: '#/components/schemas/HumanName'
        bride_nationality:
          type: string
          example: 'Dominican'
        bride_date_of_birth:
          $ref : '#/components/schemas/DateObject'
        bride_marital_status:
          type: string
          example: ''
          enum: [unmarried,divorced,widowed]
        contactno:
          type: string
          example: ''
        date_of_marriage:
          $ref : '#/components/schemas/DateObject'
        place_of_marriage:
          type: string
          example: ''
        marriage_registration_number:
          type: string
          example: ''
    CRVSSearchByBRNResponse:
      type: object
      properties:
        identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        father_name:
          $ref: '#/components/schemas/HumanName'
        mother_name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
        date_of_birth:
          type: string
          example: '11/17/1980'
        date_of_death:
          type: string
          example: '01/03/2023'
        gender:
          type: string
          example: 'male'          
        birth_registration_number:
          type: string
          example: 'BRN_XP-19801109A11'
        death_registration_number:
          type: string            
          example: 'DRN_XP-20230309A11'
    CRVSSearchByDRNResponse:
      type: object
      properties:
        identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        father_name:
          $ref: '#/components/schemas/HumanName'
        mother_name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: '+1-7894561312'
        date_of_birth:
          type: string
          example: '11/17/1980'
        date_of_death:
          type: string
          example: '01/03/2023'
        gender:
          type: string
          example: 'male'
        birth_registration_number:
          type: string
          example: 'BRN_XP-19801109A11'
        death_registration_number:
          type: string
          example: 'MRN_DC-20221205A12'          
    Identifier:
      type: object
      properties:
        type:
          type: string
          example: ''
          enum: ['NATIONAL_ID','BIRTH_REG_NO']
        value:
          type: string
          example: ''
    HttpErrorResponse:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
        error_message:
          type: string

    SubscriptionRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequestParames'
      type: object
      properties:
        event_info:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/EventInfo'
        client_id:
          type: string
        callback_url:
          type: string
    EventInfo:
      type: object
      properties:
        code:
          type: string
          example: BIRTH_REGISTRATION
        frequency:
          type: string
          example: ''
          enum: ['immediate','hourly','daily','weekly']
        response_fields:
          type: array
          example: ["name", "birthdate","birth_registration_number","DEMOGRAPHIC_UPDATE"]
          items:
            type: string 
    SubscriptionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionResponseObject'
    UnSubscribeResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionResponseObject'    
    SubscriptionResponseObject:
      type: object
      properties:
        event_code:
          type: string
          example: ''
          enum: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
        registration_id:
          type: string
          example: ''
        status:
          type: string
          example: ''

    UnSubscribeRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequestParames'
      type: object
      properties:
        event_code:
          type: array
          items:
            type: string
          example: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
          description: 'To subscribe this event send this code in subscription request'
        client_id:
          type: string
        reason:
          type: string  
    QueryRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequestParames'
      type: object
      description: '' 
      properties:
        request:
          type: array
          items:
            type: object
            anyOf:
              - $ref: '#/components/schemas/QueryRequestObject'

    QueryRequestObject:
      type: object
      description: '' 
      properties:
        codes:
          type: array
          items:
            type: string
          example: ["IS_ALIVE", "IS_MARRIED"]
          description: ''
        transaction_id:
          type: string
          example: ''
        national_id:
          type: string
          example: 345678912@mosip
        benificiery_id:
          type: string
          example: 345678912@mosip
        registration_id:
          type: string
          example: 345678912@mosip
    QueryResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      description: '' 
      properties:
        data:
          type: array
          items:
            type: object
            anyOf:
              - $ref: '#/components/schemas/QueryResponseObject'
    RequestStatusCheckRequest:
      type: object
      properties:
        request_ids:
          type: array
          example: '["request_id1","request_id2"]'
          items:
            anyOf:
              - $ref: '#/components/schemas/RequestIdObject'
    RequestIdObject:
      type: object
      properties:
        transacrion_id:
          type: string
          example: ''
    RequestStatusObject:
      type: object
      properties:
        transacrion_id:
          type: string
          example: ''
        status:
          type: string
          example: ''
          enum: ['received','processing','processed','failed','invalid_request_id']
    RequestStatusCheckResponse:
      type: object
      example: '{"data": [{"request_id": "request_id1","status": "processing"},{"request_id": "request_id2","status": "invalid_request_id"}]}'
      properties:
        data:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/RequestStatusObject'
    QueryResponseObject:
      type: object
      description: '' 
      properties:
        transaction_id:
          type: string
          example: ''
          description: The transaction_id received in request
        codes:
          type: array
          items:
            type: object
            anyOf:
              - $ref: '#/components/schemas/Attribute'
          description: ''
          example: '[{"IS_ALIVE":"true"},{"IS_MARRIED":"false"}]'
        national_id:
          type: string
          example: 345678912@mosip
        benificiery_id:
          type: string
          example: 345678912@mosip
        registration_id:
          type: string
          example: 345678912
    HttpErrorResponse400:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-400-01'   
        error_message:
          type: string
          example: 'Bad Request'
    HttpErrorResponse401:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-401-01'   
        error_message:
          type: string
          example: 'Unauthorized' 
    HttpErrorResponse403:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-403-01'      
        error_message:
          type: string
          example: 'Forbidden'   
    HttpErrorResponse404:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-404-01'   
        error_message:
          type: string
          example: 'Not Found'
    HttpErrorResponse422:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-422-01'   
        error_message:
          type: string
          example:    
    HttpErrorResponse405:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-405-01'       
        error_message:
          type: string
          example: 'Method Not Allowed'
    HttpErrorResponse500:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-500-01'   
        error_message:
          type: string
          example: 'Internal server error'   
    Address:
      type: object
      properties:
        house_no:
          type: string
          example: ''
        address_line_1:
          type: string
          example: ''
        address_line_2:
          type: string
          example: ''          
        district:
          type: string
          example: ''          
        state:
          type: string
          example: ''          
        postal_code:
          type: string
          example: '' 
    DateObject:
      type: object
      properties:
        day:
          type: string
          example: ''
        month: 
          type: string
          example: ''
        year: 
          type: string
          example: ''
  securitySchemes:
    spmis_auth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT