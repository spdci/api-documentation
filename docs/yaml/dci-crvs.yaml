openapi: 3.0.3
info:
  title: CRVS Search APIs
  description: ''
  version: 0.0.1
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ahi-dev-dc/APIDoc/0.0.1
  - description: Gateway endpoint
    url: https://localhost:8081/
tags:
  - name: Search API
    description: '' 
paths:

  /v1/search:
    post:
      tags:
        - Search API
      summary: To perform search operation in registry
      description: The Search operation perfromed for registry 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Search request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /v1/on-search:
    post:
      tags:
        - Search API 
      summary: Search request call back, if callback URL empty then save response at server end respond with data when requested
      description: The requester will pass information submitted in search and if response prepared then it will send content
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      requestBody:
        description: Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
components:
  parameters:
    authorization:
      name: Authorization
      in: header
      required: true
      description: Access token which was issued after successful login with gateway auth server.
      schema:
        type: string
        example: Bearer <...>        
    version:
      in: header
      name: x-api-version
      schema:
        type: string
        example: "1.0.0"
      required: false
      description: If not provided use latest api version as default
    x-timestamp:
      in: header
      name: timestamp
      schema:
        type: string
        example: "2022-12-04T18:01:07+00:00"
      required: true
      description: Timestamp of request when it was sent , ideally it should be GMT
    x-hmac:
      in: header
      name: x-hmac
      schema:
        type: string
        example: "bd4a82cd319ababe57d0a822049ae8985029f82237509d3f091c82cbc7a6945c"
      required: true
      description: Signature created in combination of {payload}+{x-timestamp:}+{x-sender-id}.This is usually encrypted string using HMAC-SHA-256 algorithm with the private key.
    x-registry-type:
      in: header
      name: x-registry-type
      schema:
        type: string
        enum: ['x-crvs']
      required: true
      description: This param used to decide which service to be called to retrieve data
    x-sender-id:
      in: header
      name: x-sender-id
      schema:
        type: string
        example: "SP_CRVS_2022"
      required: true
      description: Information about requester , it may be some code of SP system
    x-message-id:
      in: header
      name: x-message-id
      schema:
        type: string
        format: uuid
        example: 0c96614c-7255-4774-b109-cd53ee859000
      required: true
      description: UUID string to be sent in request header for tracking of request
    x-async:
      in: header
      name: x-async
      schema:
        type: string
        example: true
      required: true
      description: Async param indicate that response to be sent immediate or in call back, if _true_ send data in response if _false_ just return HTTP status 202
    x-callbackendpoint:
      in: header
      name: x-callbackendpoint
      schema:
        type: string
        example: "https://senderhost/callback/on-disburse"
      required: false
      description: If async response requested then this param to be supplied for receiving data in SP system, this is usually endpoint active in SP env

  schemas:
    SearchRequest:
      allOf:
        - $ref: '#/components/schemas/FilterGroupCRVSRegistry'
      type: object
      properties:
        transaction_id:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee851769
#        filtergroups:
#          type: array
#          items:
#            oneOf:
#              - $ref: '#/components/schemas/FilterGroupCRVSRegistry'
        sortby:
          $ref: '#/components/schemas/Sort'
        pagination:
          type: object
          properties:
            page_size:
              type: number
              example: 10
            page_number:
              type: number
              example: 5  
    SearchCondition:
      description: Expression with a condition
      type: object
      properties:
        expression1:
          $ref: '#/components/schemas/SearchExpression'
        condition:
          $ref: '#/components/schemas/SearchExpCondition'
        expression2:
          $ref: '#/components/schemas/SearchExpression'
      required:
        - expression1
    SearchConditionList:
      items:
        $ref: '#/components/schemas/SearchCondition'
    SearchExpCondition:
      description: Condition in an expression
      type: string
      enum:
        - and
        - or
        - not
      example: and
    SearchExpOperator:
      description: Operator in an expression
      type: string
      enum:
        - gt
        - lt
        - eq
        - ge
        - le
      example: eq
    SearchExpression:
      description: Expression
      properties:
        seq_num:
          description: Expression sequence number for correlation
          type: number
          example: 1
        attribute_name:
          type: string
          description: attribute name
          enum: ['']
        operator:
          $ref: '#/components/schemas/SearchExpOperator'
        attribute_value:
          oneOf:
            - type: string
            - type: integer
            - type: number
            - type: boolean
    FilterGroupCRVSRegistry:
      type: object
      properties:
        fields:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/IdentifierTypeField'
              - $ref: '#/components/schemas/IdentifierValueField'
              - $ref: '#/components/schemas/RegionField'
              - $ref: '#/components/schemas/Repositories'
    Field:
      type: object
      required:
        - operator
      properties: 
        operator:
          $ref: '#/components/schemas/FieldOperator'
    IdentifierTypeField:
      description: 'Search with identifier type'
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'identifier.type'
              enum: ['identifier.type']
            value: 
              type: string
              example: "NATIONAL_ID"
              enum: ['NATIONAL_ID','CRVS_ID']
    IdentifierValueField:
      description: 'Search with identifier value'
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'identifier.value'
              enum: ['identifier.value']
            value: 
              type: string
              example: "345678912"
              description: 'Any string that contains identifier, for example for identifier.type NATIONAL_ID value may be 345678912'
    RegionField:
      description: 'Search by region'        
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'region'
              enum: ['location']
            value: 
              type: string
              example: "SE- India"
              enum: ['SE- India','WEST - INDIA']
              description: 'Search by location'
    Repositories:
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'repository_type'
              enum: ['repository_type']
            value: 
              type: string
              example: "Birth"
              enum: ['Birth', 'Death', 'Marriage']
              description: 'Search by repository_type type'
    FieldOperator:
      type: string
      enum:
        - or
        - and
        - contains
        - like
    GroupOperator:
      type: string
      enum:
        - or
        - and
    Sort:
      type: object
      properties:
        fieldname:
          type: string
          enum: [firstname,dob]
        order:
          type: string
          enum: ["asc","desc"]
    ApiResponse:
      type: object
      properties:
        success:
          type: string
        return_message:
          type: string
        error_code:
          type: string
        transaction_id:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee859000
          description: The transaction_id received in request
        data: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/CRVSSearchByMRNResponse'
              - $ref: '#/components/schemas/CRVSSearchByBRNResponse'
              - $ref: '#/components/schemas/CRVSSearchByDRNResponse'
    HumanName:
      type: object
      properties:
        suffix:
          type: string
          example: PhD
        prefix:
          type: string
          example: Mr.
        first_name:
          type: string
          example: john
        middle_name:
          type: string
          example: doe
        last_name:
          type: string
          example: doe
    CRVSSearchByMRNResponse:
      type: object
      properties:
        groom_identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        groom_name:
          $ref: '#/components/schemas/HumanName'
        groom_father_name:
          $ref: '#/components/schemas/HumanName'
        groom_mother_name:
          $ref: '#/components/schemas/HumanName'
        groom_nationality:
          type: string
        groom_date_of_birth:
          type: string
        groom_marital_status:
          type: string
          enum: [unmarried,divorced,widowed]
        bride_identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        bride_name:
          $ref: '#/components/schemas/HumanName'
        bride_father_name:
          $ref: '#/components/schemas/HumanName'
        bride_mother_name:
          $ref: '#/components/schemas/HumanName'
        bride_nationality:
          type: string
        bride_date_of_birth:
          type: string
        bride_marital_status:
          type: string
          enum: [unmarried,divorced,widowed]
        contactno:
          type: string
        date_of_marriage:
          type: string
        place_of_marriage:
          type: string
        marriage_registration_number:
          type: string
    CRVSSearchByBRNResponse:
      type: object
      properties:
        identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        father_name:
          $ref: '#/components/schemas/HumanName'
        mother_name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
        date_of_birth:
          type: string
        date_of_death:
          type: string
        gender:
          type: string
        birth_registration_number:
          type: string
        death_registration_number:
          type: string            
    CRVSSearchByDRNResponse:
      type: object
      properties:
        identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        father_name:
          $ref: '#/components/schemas/HumanName'
        mother_name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
        date_of_birth:
          type: string
        date_of_death:
          type: string
        gender:
          type: string
        birth_registration_number:
          type: string
        death_registration_number:
          type: string
    Identifier:
      type: object
      properties:
        type:
          type: string
          enum: ['NATIONAL_ID','FARMER_REG_NO']
        value:
          type: string
          example: 345678912
    HttpErrorResponse:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
        error_message:
          type: string
  securitySchemes:
    spmis_auth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT