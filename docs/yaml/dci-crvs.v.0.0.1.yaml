openapi: 3.0.3
info:
  title: CRVS interoperability APIs
  description: ''
  version: 0.0.1
servers:
  # Added by API Auto Mocking Plugin
  - description: Gateway endpoint
    url: https://localhost:8081/
paths:
  /crvs/isAlive:
    post:
      tags:
        - CRVS APIs
      summary: 'API to check if a person is alive or not based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsAliveCheckResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /crvs/getAge:
    post:
      tags:
        - CRVS APIs
      summary: 'API to retrieve the age of a person based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgeResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /crvs/getMaritalStatus:
    post:
      tags:
        - CRVS APIs
      summary: 'API to retrieve marital status of a person based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaritalStatusCheckRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaritalStatusCheckResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /crvs/getBirthInfo:
    post:
      tags:
        - CRVS APIs      
      summary: 'API that provides birth information for a person based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BirthInfoResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /crvs/getMarriageInfo:
    post:
      tags:
        - CRVS APIs      
      summary: 'API that provides marriage information for a person based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarriageInfoRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarriageInfoResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /crvs/getDeathInfo:
    post:
      tags:
        - CRVS APIs      
      summary: 'API that provides death information for a person based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeathInfoResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /crvs/getPersonInfo:
    post:
      tags:
        - CRVS APIs      
      summary: 'API that provides person info based on an ID'
      description:  ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDInfoLookupResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /crvs/getDemographicInfo:
    post:
      tags:
        - CRVS APIs      
      summary: 'API that provides demographic details of a person based on an ID'
      description:  ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChildDemographicResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /crvs/getVitalEventDates:
    post:
      tags:
        - CRVS APIs
      summary: 'API that provides date of birth/date of death/marriage date based on ID'
      description: ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'      
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDEventDatesResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search

  /crvs/getVitalEvents:
    post:
      tags:
        - CRVS APIs
      summary: 'API that provides life event details based on vital event type and data retrieved based on ID of person'
      description: ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInfoRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventInfoResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search

  
components:
  parameters:
    authorization:
      name: Authorization
      in: header
      required: true
      description: Access token which was issued after successful login with gateway auth server.
      schema:
        type: string
        example: Bearer <...>        
    version:
      in: header
      name: x-api-version
      schema:
        type: string
        example: "1.0.0"
      required: false
      description: If not provided use latest api version as default
    x-timestamp:
      in: header
      name: timestamp
      schema:
        type: string
        example: "2022-12-04T18:01:07+00:00"
      required: true
      description: Timestamp of request when it was sent , ideally it should be GMT
    x-hmac:
      in: header
      name: x-hmac
      schema:
        type: string
        example: "bd4a82cd319ababe57d0a822049ae8985029f82237509d3f091c82cbc7a6945c"
      required: true
      description: Signature created in combination of {payload}+{x-timestamp:}+{x-sender-id}.This is usually encrypted string using HMAC-SHA-256 algorithm with the private key.
    x-registry-type:
      in: header
      name: x-registry-type
      schema:
        type: string
        enum: ['x-crvs']
      required: true
      description: This param used to decide which service to be called to retrieve data
    x-sender-id:
      in: header
      name: x-sender-id
      schema:
        type: string
        example: "SP_CRVS_2022"
      required: true
      description: Information about requester , it may be some code of SP system
    x-message-id:
      in: header
      name: x-message-id
      schema:
        type: string
        format: uuid
        example: 0c96614c-7255-4774-b109-cd53ee859000
      required: true
      description: UUID string to be sent in request header for tracking of request
    x-async:
      in: header
      name: x-async
      schema:
        type: string
        example: true
      required: true
      description: Async param indicate that response to be sent immediate or in call back, if _true_ send data in response if _false_ just return HTTP status 202
    x-callbackendpoint:
      in: header
      name: x-callbackendpoint
      schema:
        type: string
        example: "https://senderhost/callback/on-disburse"
      required: false
      description: If async response requested then this param to be supplied for receiving data in SP system, this is usually endpoint active in SP env

  schemas:

    IsAliveCheckResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/IsAliveCheckObject'
    IsAliveCheckObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        is_alive:
          type: string
          enum: [yes,no]
  
    IDEventDatesRequest:
      type: object
      properties:
        identifier_list:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    BirthInfoResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/BirthInfo'
    DeathInfoResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/DeathInfo'
      
    EventInfoRequest:
      type: object
      example: '{"identifier_list":[{"identifier":{"type":"NATIONAL_ID","value":"345678912"},"vital_event":"birth","txn-id":"bb26699c-abda-45be-bdcb-7c22d13355fa"},{"identifier":{"type":"NATIONAL_ID","value":"345678913"},"vital_event":"death","txn-id":"bb26699c-abda-45be-bdcb-7c22d13355fb"},{"identifier":{"type":"NATIONAL_ID","value":"345678914"},"vital_event":"marriage","txn-id":"bb26699c-abda-45be-bdcb-7c22d13355fc"}]}'
      properties:
        identifier_list:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/EventInfoRequestObject'
    
    EventInfoResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      example: '{"success":"string","return_message":"Success message","error_code":"Error message","transaction_id":"0c96614c-7255-4774-b109-cd53ee859000","data":[{"txn-id":"bb26699c-abda-45be-bdcb-7c22d13355fa","vital_event":"birth","vital_event_data":[{"identifier":{"type":"NATIONAL_ID","value":"345678912"},"name":{"suffix":"PhD","prefix":"Mr.","first_name":"john","middle_name":"doe","last_name":"doe"},"father_name":{"suffix":"PhD","prefix":"Mr.","first_name":"john","middle_name":"doe","last_name":"doe"},"mother_name":{"suffix":"PhD","prefix":"Mr.","first_name":"john","middle_name":"doe","last_name":"doe"},"contactno":"+91-0000000000","date_of_birth":"11/17/1980","gender":"male","birth_registration_no":"01/03/2023","birth_place_address":"Address of birth pace"}]},{"txn-id":"bb26699c-abda-45be-bdcb-7c22d13355fb","vital_event":"death","vital_event_data":[{"identifier":{"type":"NATIONAL_ID","value":"345678913"},"name":{"suffix":"PhD","prefix":"Mr.","first_name":"john","middle_name":"doe","last_name":"doe"},"contactno":"+91-0000000000","date_of_death":"01/03/2023","gender":"male","death_registration_no":"01/03/2023","death_place_address":"Address of death place"}]},{"txn-id":"bb26699c-abda-45be-bdcb-7c22d13355fc","vital_event":"marriage","vital_event_data":[{"groom_identifier":[{"type":"NATIONAL_ID","value":"345678914"}],"groom_name":{"suffix":"PhD","prefix":"Mr.","first_name":"john","middle_name":"doe","last_name":"doe"},"groom_nationality":"Dominican","groom_date_of_birth":"12/05/1983","bride_identifier":[{"type":"NATIONAL_ID","value":"345678916"}],"bride_name":{"suffix":"PhD","prefix":"Mr.","first_name":"john","middle_name":"doe","last_name":"doe"},"bride_nationality":"Dominican","bride_date_of_birth":"12/05/1983","date_of_marriage":"12/05/2022","place_of_marriage":"Angel Iceland","marriage_registration_number":"MRN_DC-20221205A12"}]}]}'
      type: object
      properties:
        data: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/EventInfoResponseObject'
    EventInfoResponseObject:
      type: object
      properties:
        txn-id:
          type: string
          example: 'bb26699c-abda-45be-bdcb-7c22d13355fb'
        vital_event:
          type: string
          enum: ['birth','death','marriage']
        vital_event_data:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BirthInfo'
              - $ref: '#/components/schemas/DeathInfo'
              - $ref: '#/components/schemas/MarriageInfoObject'
    BirthInfo:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        father_name:
          $ref: '#/components/schemas/HumanName'
        mother_name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: '+91-0000000000'
        date_of_birth:
          type: string
          example: '11/17/1980'
        gender:
          type: string
          example: 'male'    
        birth_registration_no:
          type: string
          example: '01/03/2023'
        birth_place_address:
          type: string
          example: 'Address of birth pace'
          
    DeathInfo:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: '+91-0000000000'
        date_of_death:
          type: string
          example: '01/03/2023'
        gender:
          type: string
          example: 'male'    
        death_registration_no:
          type: string
          example: '01/03/2023'
        death_place_address:
          type: string
          example: 'Address of death place'
    EventInfoRequestObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        vital_event:
          type: string
          enum: ['birth','death','marriage']
        txn-id:
          type: string
          example: 'bb26699c-abda-45be-bdcb-7c22d13355fb'
    IDEventDatesResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/IDEventDatesObject'
    IDEventDatesObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: '+91-0000000000'
        date_of_birth:
          type: string
          example: '11/17/1980'
        date_of_death:
          type: string
          example: '01/03/2023'
        date_of_marriage:
          type: string
          example: '09/11/1995'
        gender:
          type: string
          example: 'male'          

    IDInfoLookupRequest:
      type: object
      properties:
        identifier_list:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    IDInfoLookupResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/IDInfoLookupObject'
    IDInfoLookupObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: '+91-0000000000'
        date_of_birth:
          type: string
          example: '11/17/1980'
        gender:
          type: string
          example: 'male'          
    ChildDemographicResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/ChildDemographicObject'
    ChildDemographicObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        father_name:
          $ref: '#/components/schemas/HumanName'
        mother_name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: '+91-0000000000'
        date_of_birth:
          type: string
          example: '11/17/1980'
        date_of_death:
          type: string
          example: '01/03/2023'
        gender:
          type: string
          example: 'male'          


    IDRequest:
      type: object
      properties:
        identifier_list:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    AgeResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/CategoryCheckObject'
    CategoryCheckObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        age:
          type: number
          example: 50
    MaritalStatusCheckRequest:
      type: object
      properties:
        identifier_list:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    MaritalStatusCheckResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/MaritalStatusCheckObject'
    MaritalStatusCheckObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        marital_status:
          type: string
          example: married
          enum: ['single','married','annualed','widowed']

              
    MarriageInfoRequest:
      type: object
      properties:
        identifier_list:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    MarriageInfoResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/MarriageInfoObject'
    MarriageInfoObject:
      type: object
      properties:
        groom_identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        groom_name:
          $ref: '#/components/schemas/HumanName'
        groom_nationality:
          type: string
          example: 'Dominican'
        groom_date_of_birth:
          type: string
          example: '12/05/1983'        
        bride_identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        bride_name:
          $ref: '#/components/schemas/HumanName'
        bride_nationality:
          type: string
          example: 'Dominican'
        bride_date_of_birth:
          type: 'string'
          example: '12/05/1983'
        date_of_marriage:
          type: string
          example: '12/05/2022'          
        place_of_marriage:
          type: string
          example: 'Angel Iceland'
        marriage_registration_number:
          type: string
          example: 'MRN_DC-20221205A12'     

    ApiResponse:
      type: object
      properties:
        success:
          type: string
        return_message:
          type: string
          example: 'Success message'
        error_code:
          type: string
          example: 'Error message'
        transaction_id:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee859000
          description: The transaction_id to track request response

    HumanName:
      type: object
      properties:
        suffix:
          type: string
          example: PhD
        prefix:
          type: string
          example: Mr.
        first_name:
          type: string
          example: john
        middle_name:
          type: string
          example: doe
        last_name:
          type: string
          example: doe


    Identifier:
      type: object
      properties:
        type:
          type: string
          enum: ['NATIONAL_ID','BIRTH_REG_NO','MARRIAGE_REG_NO','DEATH_REG_NO']
        value:
          type: string
          example: 345678912
    HttpErrorResponse:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
        error_message:
          type: string


  securitySchemes:
    spmis_auth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT