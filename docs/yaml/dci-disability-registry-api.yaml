openapi: 3.0.3
info:
  title: Disability registry APIs
  description: ' **A Disability registry APIs** is an application programming interface that allows developers to access data from a disability registry. A disability registry is a database that contains information about individuals with disabilities, including their demographic information, medical history, and disability status.
The Disability registry API can be used by developers to build applications and tools that provide services and support for people with disabilities. For example, a developer could use the API to build an app that helps people with disabilities find accessible transportation or locate disability-friendly housing.
The Disability registry API provides a standardized way for developers to access data from a disability registry, which can make it easier and faster to build applications that support people with disabilities.'
  version: 0.0.1
servers:
  - description: Disability registry access point
    url: https://localhost:8081/
tags:
  - name: Search API
    description: '' 
  - name: Eligibility determination API
    description: ''
  - name: Event subscription
    description: 'The event subscription APIs facilate to get notification when any event happens in disability registry, The client application meed to register for each event seperately with provided client id and client secret'

paths:
  /search:
    post:
      tags:
        - Search API
      summary: To perform search operation in registry
      description: The Search operation perfromed for registry 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Search request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '202':
          description: Accepted 
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /on-search:
    post:
      tags:
        - Search API 
      summary: Search request call back, if callback URL empty then save response at server end respond with data when requested
      description: The requester will pass information submitted in search and if response prepared then it will send content
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      requestBody:
        description: Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /eligibility-determination:
    get:
      tags:
        - Eligibility determination API 
      summary: Get list of eligibility determination supported by registry
      description: ''
      operationId: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/SupportedEligibility'          
      security:
        - spmis_auth:
            - read:eligibity
    post:
      tags:
        - Eligibility determination API 
      summary: To get information of eligibity for person
      description: Response will contain information about requested eligibity that may include boolean status or json with more details
      operationId: ''
      requestBody:
        description: Send details to be validated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EligibilityDeterminationRequest'     
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EligibilityDeterminationResponse'     
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'                 
      security:
        - spmis_auth:
            - read:relationships
  /subscription-list:
    get:
      tags:
        - Event subscription 
      summary: Get list of supported events in registry
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      description: ''
      operationId: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/SupportedEvents'          
      security:
        - spmis_auth:
            - read:eligibity
  /subscribe:
    post:
      tags:
        - Event subscription  
      summary: To subscribe for specific event
      description: Response will contain eligibity details
      operationId: ''
      requestBody:
        description: send details of identifier
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'     
        required: true
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'     
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'                 
      security:
        - spmis_auth:
            - read:relationships
  /unsubscribe:
    post:
      tags:
        - Event subscription  
      summary: To un-subscribe for specific event
      description: Response will contain list of subscribed events
      operationId: ''
      requestBody:
        description: 'Request to un-subscribe'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnSubscribeRequest'     
        required: true
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'     
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'                 
      security:
        - spmis_auth:
            - read:relationships
  /events:
    post:
      tags:
        - Event subscription  
      summary: The events will retrieve all events for specific subscription
      description: Response will contain eligibity details
      operationId: ''
      requestBody:
        description: send details of identifier
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventsRequest'     
        required: true
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'     
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'                 
      security:
        - spmis_auth:
            - read:relationships

components:
  parameters:
    authorization:
      name: Authorization
      in: header
      required: true
      description: Access token which was issued after successful login with gateway auth server.
      schema:
        type: string
        example: Bearer <...>        
    version:
      in: header
      name: x-api-version
      schema:
        type: string
        example: "1.0.0"
      required: false
      description: If not provided use latest api version as default
    x-timestamp:
      in: header
      name: timestamp
      schema:
        type: string
        example: "2022-12-04T18:01:07+00:00"
      required: true
      description: Timestamp of request when it was sent , ideally it should be GMT
    x-hmac:
      in: header
      name: x-hmac
      schema:
        type: string
        example: "bd4a82cd319ababe57d0a822049ae8985029f82237509d3f091c82cbc7a6945c"
      required: true
      description: Signature created in combination of {x-message-id}+{x-timestamp:}+{x-sender-id}.This is usually encrypted string using HMAC-SHA-256 algorithm with the private key.
    x-registry-type:
      in: header
      name: x-registry-type
      schema:
        type: string
        enum: ['x-disability']
      required: true
      description: This param used to decide which service to be called to retrieve data
    x-sender-id:
      in: header
      name: x-sender-id
      schema:
        type: string
        example: "NOBLE_SP_PROGRAMME"
      required: true
      description: Information about requester , it may be some code of SP system
    x-message-id:
      in: header
      name: x-message-id
      schema:
        type: string
        format: uuid
        example: 0c96614c-7255-4774-b109-cd53ee859000
      required: true
      description: UUID string to be sent in request header for tracking of request
    x-async:
      in: header
      name: x-async
      schema:
        type: string
        example: true
      required: true
      description: Async param indicate that response to be sent immediate or in call back, if _true_ send data in response if _false_ just return HTTP status 202
    x-callbackendpoint:
      in: header
      name: x-callbackendpoint
      schema:
        type: string
        example: "https://senderhost/callback/on-disburse"
      required: false
      description: If async response requested then this param to be supplied for receiving data in SP system, this is usually endpoint active in SP env
  schemas:
    SearchRequest:
      type: object
#      example: '{"transaction_id":"0c96614c-7255-4774-b109-cd53ee851769","additionalFields":["contact","address","dob"],"filtergroups":[{"groupid":"A","operator-with-next-group":"and","fields":[{"fieldname":"identifier.type","operator":"contains","value":"NATIONAL_ID","nextfieldoperator":"and"},{"fieldname":"identifier.value","operator":"contains","value":"345678912","nextfieldoperator":""}]},{"groupid":"B","operator-with-next-group":"","fields":[{"fieldname":"name.first_name","operator":"contains","value":"john","nextfieldoperator":"or"},{"fieldname":"name.last_name","operator":"contains","value":"doe","nextfieldoperator":""}]}],"sortby":[{"fieldname":"name.first_name","order":"asc"}],"pagination":{"page_size":10,"page_number":5}}'
      properties:
        transaction_id:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee851769
        filtergroups:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/FilterGroupDisabilityRegistry'
        sortby:
          $ref: '#/components/schemas/Sort'
        pagination:
          type: object
          properties:
            page_size:
              type: number
              example: 10
            page_number:
              type: number
              example: 5  
    FilterGroupDisabilityRegistry:
      type: object
      properties:
        groupid:
          type: string
          format: string
          example: "A"
        operator-with-next-group:
          type: string
          description: 'Operation with next group' 
          enum: ["and", "or"]
        fields:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/IdentifierTypeField'
              - $ref: '#/components/schemas/IdentifierValueField'
              - $ref: '#/components/schemas/RegionField'
              - $ref: '#/components/schemas/NameField'
              - $ref: '#/components/schemas/DisabilityTypeField'
    Field:
      type: object
      required:
        - operator
        - nextfieldoperator
      properties: 
        operator:
          $ref: '#/components/schemas/FieldOperator'
        nextfieldoperator: 
          $ref: '#/components/schemas/GroupOperator'
    IdentifierTypeField:
      description: 'Search with identifier type'
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'identifier.type'
              enum: ['identifier.type']
            value: 
              type: string
              example: "NATIONAL_ID"
              enum: ['NATIONAL_ID','DISABILITY_CERTIFICATE_NO']
    IdentifierValueField:
      description: 'Search with identifier value'
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'identifier.value'
              enum: ['identifier.value']
            value: 
              type: string
              example: "345678912"
              description: 'Any string that contains identifier, for example for identifier.type NATIONAL_ID value may be 345678912'
    NameField:
      description: 'Search with first name, HumanName is response object so fields of HumanName to be sent in search'
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'name.first_name'
              enum: ['name.first_name','name.last_name']
            value: 
              type: string
              example: "John"
              description: 'Search by first name or last name of human'
    DisabilityTypeField:
      description: 'Search by disability type'    
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'disabilitytype'
              enum: ['croptype']
            value: 
              type: string
              example: "Blindness"
              enum: ['Blindness','Low Vision','Deaf','Haemophilia','Thalassemia','Sickle Cell Disease']
              description: 'Search by crop type'
    RegionField:
      description: 'Search by region'        
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'region'
              enum: ['location']
            value: 
              type: string
              example: "SE- India"
              enum: ['SE- India','WEST - INDIA']
              description: 'Search by location'
    FieldOperator:
      type: string
      enum:
        - in
        - or
        - and
        - contains
        - like
    GroupOperator:
      type: string
      enum:
        - or
        - and
    Sort:
      type: object
      properties:
        fieldname:
          type: string
          enum: [firstname,dob]
        order:
          type: string
          enum: ["asc","desc"]
    ApiResponse:
      type: object
      properties:
        success:
          type: string
        return_message:
          type: string
        error_code:
          type: string
        transaction_id:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee859000
          description: The transaction_id received in request
        data: 
          type: array
          items:
            $ref: '#/components/schemas/DisabilityInfo'
    HumanName:
      type: object
      properties:
        suffix:
          type: string
          example: PhD
        prefix:
          type: string
          example: Mr.
        first_name:
          type: string
          example: john
        middle_name:
          type: string
          example: doe
        last_name:
          type: string
          example: doe
    DisabilityInfo:
      type: object
      properties:
        identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        age:
          type: string
        birthday:
          type: string
          enum: ['Food Crops','Feed Crops','Fiber Crops','Oil Crops','Ornamental Crops','Industrial Crops']
        gender:
          type: string
          enum: ['Male','Female','Transgender male','Transgender female']
        contactno:
          type: string
        disability: 
          type: array
          items:
            $ref: '#/components/schemas/Disability'
    Disability:
      type: object
      properties:
        registration_id:
          type: string
          format: string
          example: 'DR20230502001-001'
        certificate_issue_no:
          type: string
          description: Certificate number
          example: '15-Jan-1986'
        certificate_issue_date:
          type: string
          description: Certificate issue date 
          example: '15-Jan-1986'
        disability_since:
          type: string
          format: string
          example: '05-Dec-1985'
        disability_type:
          type: string
          format: string
          example: 'Mobility | Spastic hemiplegic cerebral palsy'
        disability_icd10_code:
          type: string
          format: string
          example: 'G80.1'

        disability_percentage:
          type: string
          format: string
          example: '97'        
        disability_by_birth:
          type: string
          format: string
          example: 'No'        
        identifier_institutation:
          type: string
          format: string
          example: 'Village Health Center'        
        treating_institutation:
          type: string
          format: string
          example: 'Urban Health Center'          
    SupportedEligibility:
      type: object
      properties:
        eligibity_id:
          type: string
          format: string
        eligibity_type:
          type: string
          description: Supprted eligibity checks by disability registry 
          example: IS_DISABLE
          enum: ['IS_DISABLE']
        response_format:
          type: string
          enum: ['json','boolean','pdf','png','jpeg']
    SupportedEvents:
      type: object
      properties:
        eventlist:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/DisableRegistrationEvent'
    DisableRegistrationEvent:
      type: object
      properties:
        event_code:
          type: string
          enum: ['DISABLE_PERSON_REGISTRATION']
          description: 'To subscribe this event send this code in subscription request'
        response_format:
          type: string
          enum: ['json']
        response_sample:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/DisabilityInfo'
    SubscriptionRequest:
      type: object
      properties:
        event_code:
          type: string
          enum: ['DISABLE_PERSON_REGISTRATION']
          description: 'To subscribe this event send this code in subscription request'
        client_id:
          type: string
        callback_url:
          type: string
        status:
          type: string        
    EventsRequest:
      type: object
      properties:
        event_code:
          type: string
          enum: ['DISABLE_PERSON_REGISTRATION']
          description: 'To subscribe this event send this code in subscription request'
        client_id:
          type: string
        start_date:
          type: string
          description: 'Date from which events to retrieve'
        end_date:
          type: string        
          description: 'Date upto which events to retrieve'        
    EventsResponse:
      type: object
      properties:
        eventlist:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/DisableRegistrationEvent'
    UnSubscribeRequest:
      type: object
      properties:
        event_code:
          type: string
          enum: ['DISABLE_PERSON_REGISTRATION']
          description: 'To subscribe this event send this code in subscription request'
        client_id:
          type: string
        reason:
          type: string
    SubscriptionResponse:
      type: object
      properties:
        success:
          type: string
        return_message:
          type: string
        error_code:
          type: string
        status:
          type: string
        data: 
          type: array
          description: 'List of all subscribed events with registry'
          items:
            $ref: '#/components/schemas/SubscriptionRequest'
    EligibilityIsDisableCheck:
      type: object
      properties:
        eligibity_id:
          type: string
          format: string
        eligibity_type:
          type: string
          description: eligibity type 
          example: IS_DISABLE
          enum: ['IS_DISABLE']
        response_format:
          type: string
          enum: ['json','boolean','pdf','png','jpeg'] 
    EligibilityDeterminationRequest:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        operations:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/EligibilityIsDisableCheck'
        attestation:
          $ref: '#/components/schemas/EligibilityVerifier'
    EligibilityVerifier:
      type: object
      properties:
        institutation_code:
          type: string
          enum: ['GOV-HEALTH-DEPT-GUJ','GOV-HEALTH-DEPT-MH']
        institutation_name:
          type: string
          example: Department of Agricalture
    EligibilityDeterminationResponse:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        operations:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/EligibilityIsDisableCheck'
        attestation:
          $ref: '#/components/schemas/EligibilityVerifier'
        issuance_metadata:
          type: object
          additionalProperties:
            type: string
          example:
            'DISABILITY_CERTIFICATE_NO': 'IN-GJ-01-23456'
            'DISABILITY_TYPE': 
              enum: ['owner','rented']
    Identifier:
      type: object
      properties:
        type:
          type: string
          enum: ['NATIONAL_ID','DISABILITY_CERTIFICATE_NO']
        value:
          type: string
          example: 345678912
    HttpErrorResponse:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
        error_message:
          type: string

  securitySchemes:
    spmis_auth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT