openapi: 3.0.3
info:
  title: Farmer registry Search APIs
  description: ''
  version: 0.0.1

servers:
  - description: Gateway endpoint
    url: https://localhost:8081/
tags:
  - name: Search API
    description: '' 
paths:
  /v1/search:
    post:
      tags:
        - Search API
      summary: To perform search operation in registry
      description: The Search operation perfromed for registry 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Search request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /v1/on-search:
    post:
      tags:
        - Search API 
      summary: Search request call back, if callback URL empty then save response at server end respond with data when requested
      description: The requester will pass information submitted in search and if response prepared then it will send content
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      requestBody:
        description: Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search

components:
  parameters:
    authorization:
      name: Authorization
      in: header
      required: true
      description: Access token which was issued after successful login with gateway auth server.
      schema:
        type: string
        example: Bearer <...>        
    version:
      in: header
      name: x-api-version
      schema:
        type: string
        example: "1.0.0"
      required: false
      description: If not provided use latest api version as default
    x-timestamp:
      in: header
      name: timestamp
      schema:
        type: string
        example: "2022-12-04T18:01:07+00:00"
      required: true
      description: Timestamp of request when it was sent , ideally it should be GMT
    x-hmac:
      in: header
      name: x-hmac
      schema:
        type: string
        example: "bd4a82cd319ababe57d0a822049ae8985029f82237509d3f091c82cbc7a6945c"
      required: true
      description: Signature created in combination of {x-message-id}+{x-timestamp:}+{x-sender-id}.This is usually encrypted string using HMAC-SHA-256 algorithm with the private key.
    x-registry-type:
      in: header
      name: x-registry-type
      schema:
        type: string
        enum: ['x-mosip','x-farmer','x-social','x-crvs','x-student']
      required: true
      description: This param used to decide which service to be called to retrieve data
    x-sender-id:
      in: header
      name: x-sender-id
      schema:
        type: string
        example: "Farmer help programme "
      required: true
      description: Information about requester , it may be some code of SP system
    x-message-id:
      in: header
      name: x-message-id
      schema:
        type: string
        format: uuid
        example: 0c96614c-7255-4774-b109-cd53ee859000
      required: true
      description: UUID string to be sent in request header for tracking of request
    x-async:
      in: header
      name: x-async
      schema:
        type: string
        example: true
      required: true
      description: Async param indicate that response to be sent immediate or in call back, if _true_ send data in response if _false_ just return HTTP status 202
    x-callbackendpoint:
      in: header
      name: x-callbackendpoint
      schema:
        type: string
        example: "https://senderhost/callback/on-disburse"
      required: false
      description: If async response requested then this param to be supplied for receiving data in SP system, this is usually endpoint active in SP env

  schemas:
    SearchRequest:
      type: object
      example: '{"transaction_id":"0c96614c-7255-4774-b109-cd53ee851769","additionalFields":["contact","address","dob"],"filtergroups":[{"groupid":"A","operator-with-next-group":"and","fields":[{"fieldname":"identifier.type","operator":"contains","value":"NATIONAL_ID","nextfieldoperator":"and"},{"fieldname":"identifier.value","operator":"contains","value":"345678912","nextfieldoperator":""}]},{"groupid":"B","operator-with-next-group":"","fields":[{"fieldname":"name.first_name","operator":"contains","value":"john","nextfieldoperator":"or"},{"fieldname":"name.last_name","operator":"contains","value":"doe","nextfieldoperator":""}]}],"sortby":[{"fieldname":"name.first_name","order":"asc"}],"pagination":{"page_size":10,"page_number":5}}'
      properties:
        transaction_id:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee851769
        filtergroups:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/FilterGroupFarmerRegistry'
              - $ref: '#/components/schemas/FilterGroupCRVSRegistry'
        sortby:
          $ref: '#/components/schemas/Sort'
        pagination:
          type: object
          properties:
            page_size:
              type: number
              example: 10
            page_number:
              type: number
              example: 5  
    FilterGroupFarmerRegistry:
      type: object
      properties:
        groupid:
          type: string
          format: string
          example: "A"
        operator-with-next-group:
          type: string
          description: 'Operation with next group' 
          enum: ["and", "or"]
        fields:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/IdentifierTypeField'
              - $ref: '#/components/schemas/IdentifierValueField'
              - $ref: '#/components/schemas/NameField'
              - $ref: '#/components/schemas/CropTypeField'
              - $ref: '#/components/schemas/RegionField'
              - $ref: '#/components/schemas/FarmerTypeField'
    FilterGroupCRVSRegistry:
      type: object
      properties:
        groupid:
          type: string
          format: string
          example: "A"
        operator-with-next-group:
          type: string
          description: 'Operation with next group' 
          enum: ["and", "or"]
        fields:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/IdentifierTypeField'
              - $ref: '#/components/schemas/IdentifierValueField'
              - $ref: '#/components/schemas/RegionField'
              - $ref: '#/components/schemas/Repositories'
    Field:
      type: object
      required:
        - operator
        - nextfieldoperator
      properties: 
        operator:
          $ref: '#/components/schemas/FieldOperator'
        nextfieldoperator: 
          $ref: '#/components/schemas/GroupOperator'
    IdentifierTypeField:
      description: 'Search with identifier type'
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'identifier.type'
              enum: ['identifier.type']
            value: 
              type: string
              example: "NATIONAL_ID"
              enum: ['NATIONAL_ID','FARMER_ID']
    IdentifierValueField:
      description: 'Search with identifier value'
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'identifier.value'
              enum: ['identifier.value']
            value: 
              type: string
              example: "345678912"
              description: 'Any string that contains identifier, for example for identifier.type NATIONAL_ID value may be 345678912'
    NameField:
      description: 'Search with first name, HumanName is response object so fields of HumanName to be sent in search'
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'name.first_name'
              enum: ['name.first_name','name.last_name']
            value: 
              type: string
              example: "John"
              description: 'Search by first name or last name of human'
    CropTypeField:
      description: 'Search by crop type'    
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'croptype'
              enum: ['croptype']
            value: 
              type: string
              example: "kharif"
              enum: ['kharif','rabi','zaid']
              description: 'Search by crop type'
    RegionField:
      description: 'Search by region'        
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'region'
              enum: ['location']
            value: 
              type: string
              example: "SE- India"
              enum: ['SE- India','WEST - INDIA']
              description: 'Search by location'
    FarmerTypeField:
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'farmertype'
              enum: ['farmertype']
            value: 
              type: string
              example: "marginal"
              enum: ['owner','marginal']
              description: 'Search by farmer type'
    Repositories:
      allOf: 
        - $ref: '#/components/schemas/Field'
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'repository_type'
              enum: ['repository_type']
            value: 
              type: string
              example: "marginal"
              enum: ['Birth', 'Death', 'Marriage']
              description: 'Search by farmer type'
    FieldOperator:
      type: string
      enum:
        - or
        - and
        - contains
        - like
    GroupOperator:
      type: string
      enum:
        - or
        - and
    Sort:
      type: object
      properties:
        fieldname:
          type: string
          enum: [firstname,dob]
        order:
          type: string
          enum: ["asc","desc"]

    ApiResponse:
      type: object
      properties:
        success:
          type: string
        return_message:
          type: string
        error_code:
          type: string
        transaction_id:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee859000
          description: The transaction_id received in request
        data: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/FarmerInfo'
    HumanName:
      type: object
      properties:
        suffix:
          type: string
          example: PhD
        prefix:
          type: string
          example: Mr.
        first_name:
          type: string
          example: john
        middle_name:
          type: string
          example: doe
        last_name:
          type: string
          example: doe

    FarmerInfo:
      type: object
      properties:
        identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        location:
          type: string
        crop_type:
          type: string
          enum: ['Food Crops','Feed Crops','Fiber Crops','Oil Crops','Ornamental Crops','Industrial Crops']
        farmer_type:
          type: string
          enum: ['Marginal','Small','Medium','Large','Sharecropper','Tenant','Owner','landless']
        landsize:
          type: string
        contactno:
          type: string


    Identifier:
      type: object
      properties:
        type:
          type: string
          enum: ['NATIONAL_ID','FARMER_REG_NO']
        value:
          type: string
          example: 345678912
 
    HttpErrorResponse:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
        error_message:
          type: string
  securitySchemes:
    spmis_auth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

#    spmis_auth:
#      type: http
#      scheme: bearer
#      bearerFormat: jwt
#      flows:
#        implicit:
#          authorizationUrl: https://localhost:8081/oauth/authorize
#          scopes:
#            read:search: Allowed to perform search operation
#            read:claims: Read list of claims