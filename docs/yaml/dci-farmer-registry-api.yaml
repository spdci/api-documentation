openapi: 3.0.0
info:
  title: Farmer Registry Search APIs
  description: ''
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ahi-dev-dc/APIDoc/1.0.0
  - description: Gateway endpoint
    url: https://localhost:8081/

tags:
  - name: Search API
    description: '' 
  - name: Query Farmer Registry Registry API
    description: ''
  - name: Event subscription
    description: 'The event subscription APIs facilate to get notification when any event happens in farmer registry, The client application meed to register for each event seperately with provided client id and client secret'
paths:
  /search:
    post:
      tags:
        - Search API
      summary: To perform search operation in registry
      description: The Search operation perfromed for registry 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Search request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /on-search:
    post:
      tags:
        - Search API 
      summary: Search request call back, if callback URL empty then save response at server end respond with data when requested
      description: The requester will pass information submitted in search and if response prepared then it will send content
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      requestBody:
        description: Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Processing Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search

  /farmer/isFarmer:
    post:
      tags:
        - Query Farmer Registry Registry API
      summary: 'API to check if a person farmer or not based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsFarmerResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /farmer/getFarmerInfo:
    post:
      tags:
        - Query Farmer Registry Registry API
      summary: 'Api to retrieve farmer information based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmerInfoResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /farmer/getLandInfo:
    post:
      tags:
        - Query Farmer Registry Registry API
      summary: 'Api to retrieve land information of farmer based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmerLandInfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /farmer/getCropInfo:
    post:
      tags:
        - Query Farmer Registry Registry API
      summary: 'Api to retrieve crop information with land of a farmer based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmerCropInfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search

  /civilregistry/query:
    post:
      tags:
        - Query Civil Registry API
      summary: ''
      description: Response will contain elegibity details
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array 
              items:
               type : object 
               properties :

                nationalID:
                  type: string
                  example: "john.v@mosip"
                  description: National ID of the person to query
                queries:
                  type: array
                  items:
                    type: string
                    example: isliving
                             
                    enum:
                      - maritalStatus
                      - dateOfBirth
                      - dateOfDeath
                      - Isliving
                      - IsDivorced
                      - mortalitycount
                      - region
                      - state
                      - country
                      - mortalityreason
                      - morbidityreason
                      - diagnosiscode
                      - IsSeperated
                      - BirthRegion
                      - conditionAtBirth
                      - marriageDate
                      - divorceDate
                      - demographicDetails
                      - isJunior
                      - isMajor
                      - isSenior
                      - marriageDetails
             
               
                      
      responses :
        '202' :
          description : Accepted 
          content :
            application/json :
              schema :
                type : object 
                properties :
                  status :
                    type : string 
                    enum :
                      - accepted
      security:
        - spmis_auth:
            - read:eligibity
  /civilregistry/on-query:         
    post:
      tags:
         - Query Civil Registry API
      summary: ''
      description: Response will response of the query
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
      requestBody :
        required : true 
        content :
          application/json :
            schema :
              type : object 
              properties :
                status :
                  type : string 
                  enum :
                    - success 
                data :
                  type : array 
                  items :
                    type : object 
                    properties :
                      nationalID :
                        type : string 
                        example: "john.v@mosip"
                      isliving :
                        type : boolean
                        example: yes
                        enum :
                          - alive 
                          - deceased 
                      maritalStatus :
                        type : string 
                        example: ""
                        enum :
                          - single 
                          - married 
                          - divorced 
                          - widowed 
                      dateOfBirth :
                        type : string 
                        example: ""
                        format : date-time 
                      dateOfDeath :
                        type : string 
                        example: ""
                        format : date-time 
                      marriageDate :
                        type : string 
                        example: ""
                        format : date-time 
                      divorceDate :
                        type : string 
                        example: ""
                        format: date-time 
                      demographicDetails :
                        type : object 
                        properties :
                          firstName :
                            type : string 
                            example: ""
                          lastName :
                            type : string 
                            example: ""
                          gender :
                            type : string 
                            example: ""
                            enum :
                              - male 
                              - female 
                              - other  
                          address :
                            type : object  
                            properties:
                              street:
                                type: string
                                example: ""
                              city:
                                type: string
                                example: ""
                              state:
                                type: string
                                example: ""
                              zipCode:
                                type: string
                                example: ""
                      isJunior:
                        type: boolean
                        example: ""
                      isMajor:
                        type: boolean
                        example: ""
                      isSenior:
                        type: boolean
                        example: ""
                      marriageDetails:
                        type: object
                      birthDetails:
                        type: object
                        $ref: '#/components/schemas/BirthDetail'
      responses:
        '200':
          description: Successful callback response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'     
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'                 
      security:
        - spmis_auth:
            - read:relationships
  /subscribe:
    post:
      tags:
        - Event subscription  
      summary: To subscribe for specific event
      description: Response will contain eligibity details
      operationId: ''
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                subscription_request:
                  type: array
                  items:
                    $ref: '#/components/schemas/SubscriptionRequest'     
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'     
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'                 
      security:
        - spmis_auth:
            - read:relationships
  /subscription-notify:
    post:
      tags:
        - Event subscription 
      summary: recieve notifications from farmer registry based on registered events
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      description: ''
      operationId: ''
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                notification-response:
                  type: array
                  items:
                    $ref: '#/components/schemas/NotificationResponse'     
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/SupportedEvents'          
      security:
        - spmis_auth:
            - read:eligibity
  /unsubscribe:
    post:
      tags:
        - Event subscription  
      summary: To un-subscribe for specific event
      description: Response will contain list of subscribed events
      operationId: ''
      requestBody:
        description: 'Request to un-subscribe'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnSubscribeRequest'     
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'     
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'                 
      security:
        - spmis_auth:
            - read:relationships


components:
  parameters:
    authorization:
      name: Authorization
      in: header
      required: true
      description: Access token which was issued after successful login with gateway auth server.
      schema:
        type: string
        example: Bearer <...>        
    version:
      in: header
      name: x-api-version
      schema:
        type: string
        example: "1.0.0"
      required: false
      description: If not provided use latest api version as default
    x-timestamp:
      in: header
      name: timestamp
      schema:
        type: string
        example: "2022-12-04T18:01:07+00:00"
      required: true
      description: Timestamp of request when it was sent , ideally it should be GMT
    x-hmac:
      in: header
      name: x-hmac
      schema:
        type: string
        example: "bd4a82cd319ababe57d0a822049ae8985029f82237509d3f091c82cbc7a6945c"
      required: true
      description: Signature created in combination of {payload}+{x-timestamp:}+{x-sender-id}.This is usually encrypted string using HMAC-SHA-256 algorithm with the private key.
    x-registry-type:
      in: header
      name: x-registry-type
      schema:
        type: string
        enum: ['x-crvs']
      required: true
      description: This param used to decide which service to be called to retrieve data
    x-sender-id:
      in: header
      name: x-sender-id
      schema:
        type: string
        example: "SP_CRVS_2022"
      required: true
      description: Information about requester , it may be some code of SP system
    x-message-id:
      in: header
      name: x-message-id
      schema:
        type: string
        format: uuid
        example: 0c96614c-7255-4774-b109-cd53ee859000
      required: true
      description: UUID string to be sent in request header for tracking of request
    x-async:
      in: header
      name: x-async
      schema:
        type: string
        example: true
      required: true
      description: Async param indicate that response to be sent immediate or in call back, if _true_ send data in response if _false_ just return HTTP status 202
    x-callbackendpoint:
      in: header
      name: x-callbackendpoint
      schema:
        type: string
        example: "https://senderhost/callback/on-disburse"
      required: false
      description: If async response requested then this param to be supplied for receiving data in SP system, this is usually endpoint active in SP env

  schemas:
    SearchRequest:
      allOf:
        - $ref: '#/components/schemas/FilterGroupFarmerRegistry'
      type: object
      properties:
        transaction_id:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee851769
        farmerbeneficiaryId:
          $ref: '#/components/schemas/benefeciaryId'
        farmerRegistrationNumber:
          $ref: '#/components/schemas/registrationNumber'  
        sortby:
          $ref: '#/components/schemas/Sort'
        pagination:
          type: object
          properties:
            page_size:
              type: number
              example: 10
            page_number:
              type: number
              example: 5  
 
 
    FilterGroupFarmerRegistry:
      type: object
      properties:
        query:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/NameField'
              - $ref: '#/components/schemas/Expression'
              - $ref: '#/components/schemas/SchemeAvailed'
    Expression:
      type: object
      properties:
        expression:
          type: string
          example: "and"
          enum: [and,or]
    NameField:
      description: 'Search by name'        
      allOf: 
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              description: Name of the field to be searched
              enum: ['firstname', 'lastname', 'national_identifier', 'email', 'gender', 'birthdate', 'place_of_birth', 'phone_number', 'address.addressline1', 'address.addressline2', 'address.locality', 'address.region', 'address.postal_code', 'address.country','marriagedate','deathdate','divorcedate','seperationdate','annulmentdate']
            operator:
              $ref: '#/components/schemas/FieldOperator'
            value:
             type: string
             example: 'john'
             description: 'Search by Name'

    SchemeAvailed:
      allOf: 
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: 'scheme-availed'
              
            operator:
              $ref: '#/components/schemas/FieldOperator'
            value: 
              type: string
              example: "PM-KISAN"
              enum: ['RKVY','PMKSY','PM-KISAN','NA']
              description: 'Search by scheme availed type'
    benefeciaryId:
      type: string
      description: '<br> 1. Beneficiary id is a normative case insensitive represenation represented as id@id-provider </br>'
      format: '^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+$'
      example: '12345@token.mosip'
    registrationNumber:
      type: string
      description: Unique registration number of farmer in a farmer registry 
      example: '12345678901234567890'          
    FieldOperator:
      type: string
      example: "eq"
      enum: [eq,not eq,and,or,contain, not contain, like,not like, range,gt,not gt,lt.not lt,between]
    Sort:
      type: object
      properties:
        fieldname:
          type: string
          enum: [firstname,dob]
        order:
          type: string
          enum: ["asc","desc"]
    ApiResponse:
      type: object
      properties:
        success:
          type: string
        return_message:
          type: string
        error_code:
          type: string
        transaction_id:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee859000
          description: The transaction_id received in request
        data: 
          type: array
          items:
            $ref: '#/components/schemas/CRVSSearchByBRNResponse'
    BaseResponse:
      type: object
      properties:
        success:
          type: string
        return_message:
          type: string
        error_code:
          type: string
        transaction_id:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee859000
          description: The transaction_id received in request
    HumanName:
      type: object
      properties:
        suffix:
          type: string
          example: PhD
        prefix:
          type: string
          example: Mr.
        first_name:
          type: string
          example: john
        middle_name:
          type: string
          example: doe
        last_name:
          type: string
          example: doe

    BenefeciaryId:
      type: string
      description: '<br> 1. Beneficiary id is a normative case insensitive represenation represented as id@id-provider </br>'
      format: '^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+$'
      example: '12345@token.mosip'
    ReferenceId:
      type: string
      description: Unique reference_id set by txn initiating system for each request in a batch
      example: '12345678901234567890'      

    FarmerInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/FarmerInfoObject'
    FarmerInfoObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        benefeciaryId:
          $ref: '#/components/schemas/BenefeciaryId'
        registrationNumber:
          $ref: '#/components/schemas/ReferenceId'
        father_name:
          $ref: '#/components/schemas/HumanName'
        gaurdian_name:
          $ref: '#/components/schemas/HumanName'
        relation_with_gaurdian:
          example: brother
          enum: ['brother', 'uncle','sister','adopted', 'father']  
        contactno:
          type: string
        date_of_birth:
          type: string
          example: '11/17/1980'
        
        gender:
          type: string
          example: 'male'       
          enum: ['male','female','transgender']   
        location:
          type: string
        crop_type:
          type: string
          example: 'Food Crops'
          enum: ['Food Crops','Feed Crops','Fiber Crops','Oil Crops','Ornamental Crops','Industrial Crops']
        farmer_type:
          type: string
          example: 'Marginal'
          enum: ['Marginal','Small','Medium','Large','Sharecropper','Tenant','Owner','landless']
        landsize:
          type: string
        educational-qualification:
          type: string
          example: 'primary-level' 
          enum: ['primary-level','secondary-level','uneducated','graduate','postgraduate'] 
        annual-income-from-family:
          type: string
        farming-main-source-income:
          type: string
          example: 'Y'
          enum: ['Y','N']
        national_id:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        crop-detail:
          type: array
          items:
            $ref: '#/components/schemas/CropDetails' 
        dependent-details:
          type: array
          items:
            $ref: '#/components/schemas/DependentDetails'  
        land-details:
          type: array
          items:
            $ref: '#/components/schemas/LandDetails'   
        schemes-availed:
          type: array
          items:
            $ref: '#/components/schemas/SchemesAvailedDetails'      
  
    FarmerLandInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/FarmerLandInfoObject'    
    
    FarmerLandInfoObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        land_info: 
          type: array
          items:
            $ref: '#/components/schemas/LandDetails'     
    
    FarmerCropInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/FarmerCropInfoObject'    
    
    FarmerCropInfoObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        crop_details_by_land: 
          type: array
          items:
            $ref: '#/components/schemas/FarmerCropInfoWithLandObject'     

    FarmerCropInfoWithLandObject:
      type: object
      properties:
        land_info: 
          $ref: '#/components/schemas/LandDetails'     
        crom_info:
          $ref: '#/components/schemas/CropDetails'
  
    
    CRVSSearchByBRNResponse:
      type: object
      properties:
        identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        benefeciaryId:
          $ref: '#/components/schemas/BenefeciaryId'
        registrationNumber:
          $ref: '#/components/schemas/ReferenceId'
        father_name:
          $ref: '#/components/schemas/HumanName'
        gaurdian_name:
          $ref: '#/components/schemas/HumanName'
        relation_with_gaurdian:
          example: brother
          enum: ['brother', 'uncle','sister','adopted', 'father']  
        contactno:
          type: string
        date_of_birth:
          type: string
          example: '11/17/1980'
        
        gender:
          type: string
          example: 'male'       
          enum: ['male','female','transgender']   
        location:
          type: string
        crop_type:
          type: string
          example: 'Food Crops'
          enum: ['Food Crops','Feed Crops','Fiber Crops','Oil Crops','Ornamental Crops','Industrial Crops']
        farmer_type:
          type: string
          example: 'Marginal'
          enum: ['Marginal','Small','Medium','Large','Sharecropper','Tenant','Owner','landless']
        landsize:
          type: string
        educational-qualification:
          type: string
          example: 'primary-level' 
          enum: ['primary-level','secondary-level','uneducated','graduate','postgraduate'] 
        annual-income-from-family:
          type: string
        farming-main-source-income:
          type: boolean
          example: 'Y'
          enum: ['Y','N']
        national_id:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        crop-detail:
          type: array
          items:
            $ref: '#/components/schemas/CropDetails' 
        dependent-details:
          type: array
          items:
            $ref: '#/components/schemas/DependentDetails'  
        land-details:
          type: array
          items:
            $ref: '#/components/schemas/LandDetails'   
        schemes-availed:
          type: array
          items:
            $ref: '#/components/schemas/SchemesAvailedDetails'     
    
    SchemesAvailedDetails:
      type: object
      description: "Schemes availed details of Farmer as stored in Farmer Registry" 
      properties:
         scheme-name:
             type: string
         availed:  
             type: boolean
             example: "Y"
             enum: ['Y','N']
         scheme_benefit_amount:
             type: string
         
    LandDetails:
      type: object
      description: "Land details of Farmer as stored in Farmer Registry" 
      properties:
         landownerName:
             $ref: '#/components/schemas/HumanName'  
         type_of_ownership:
             type: string
             example: 'leased'
             enum: ['leased','contracted','self-owned','govt-granted']
         land_location:  
             $ref: '#/components/schemas/Address'
         plot_number:
             type: string
         area_of_plot(sq m):
             type: string
         type_of_land:
            type: string
         altitude: 
            type: string
         latitude:
            type: string
         longitude:
            type: string
  
    
    DependentDetails:
      type: object
      description: "Crop details stored in Farmer Registry" 
      properties:
         dependentName:
             $ref: '#/components/schemas/HumanName'  
         age:
             type: string
         dependent_relationsip:
             type: string
             example: son
             enum: ['son','daughter','father','mother','sister','grandparents','others']

         dependent-member-id:
              type: string
               
         dependent-national-id:
              type: string
             

    CropDetails:
      type: object
      description: "Crop details stored in Farmer Registry" 
      properties:
         cropname:
              type: string
              example: "rabi-crop"
              enum: ['rabi-crop','kharif-crop','fruits-crop','plantation-crop']
              description: 'Search by crop detail'  
         croptype:
              type: string
              example: "natural-farming"
              enum: ['organic','inorganic','natural-farming']
              description: ' crop type'     
         sowing-time_in_months_and_weeks:
              type: string
         cropped_area:
              type: string     
    Identifier:
      type: object
      properties:
        type:
          type: string
          enum: ['NATIONAL_ID','BIRTH_REG_NO']
        value:
          type: string
          example: 345678912
    HttpErrorResponse:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
        error_message:
          type: string
    HttpSuccessResponse:
      description: Processing Successful
      properties:
        error_code:
          type: string
        error_message:
          type: string
    SupportedEvents:
      type: object
      properties:
        eventlist:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/BirthRegistrationEvent'
    BirthRegistrationEvent:
      type: object
      properties:
        event_code:
          type: string
          enum: ['BIRTH_REGISTRATION']
          description: 'To subscribe this event send this code in subscription request'
        response_format:
          type: string
          enum: ['json']
        response_sample:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/CRVSSearchByBRNResponse'
    SubscriptionRequest:
      type: object
      properties:
        event_code:
          type: string
          enum: [unregiser,update_benefeciary, update,land_ownership_changed,crop_detail_changed,unregister,demographic_update]
          description: 'To subscribe this event send this code in subscription request'
        Benefeciary_id:
          type: string
        Additional_info:
          type: object
          properties:
           expression:
             $ref: '#/components/schemas/ApiResponse'
        callback_url:
          type: string
    SubscriptionResponse:
      type: object
      properties:
        success:
          type: string
        return_message:
          type: string
        error_code:
          type: string
        subscribed_events:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee859000
          description: The transaction_id received in request
        data: 
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionRequest'
    UnSubscribeRequest:
      type: object
      properties:
        event_code:
          type: string
          enum: [unregiser,update_benefeciary, update,land_ownership_changed,crop_detail_changed,unregister,demographic_update]
          description: 'To subscribe this event send this code in subscription request'
        client_id:
          type: string
        reason:
          type: string  
    IsAliveEligibility:
      type: object
      properties:
        eligibility_check_id:
          type: string
          format: string
        eligibility_check_type:
          type: string
          description: Eligibility type 
          example: IS_ALIVE
          enum: ['IS_ALIVE']
        response_format:
          type: string
          enum: ['json']  
    EligibilityDeterminationRequest:
      type: object
      description: '' 
      properties:
        eligibility_codes:
          type: array
          items:
            type: string
          example: ["IS_ALIVE", "IS_MARRIED", "IS_SENIOR_CITIZEN"]
          description: 'Is given id valid in farmer registry, This will check in farmer registry for supplied information of ID'
        national_id:
          type: string
          example: 345678912
#    EligibilityDeterminationRequest:
#      type: object
#      properties:
#        
#        payload:
#          type: array
#          items:
#            anyOf:
#              - $ref: '#/components/schemas/VerifiableCredentialIsAlive'
    VerifiableCredentialIsAlive:
      type: object
      properties:
        context:
          type: array
          example: ['https://www.w3.org/2018/credentials/v1','https://w3id.org/citizenship/v1','https://example.com/crvs/v1']
          items:
            type: string
            enum: ['https://www.w3.org/2018/credentials/v1','https://w3id.org/citizenship/v1','https://example.com/crvs/v1']
        type:
          type: array
          example: ['VerifiableCredential','IsAliveCredential']
          items:
            type: string
            items:
              type: string
            example: ["VerifiableCredential", "IsAliveCredential"]                 
        determine:
          $ref : '#/components/schemas/IsAliveEligibility'
        issuer: 
          type: string
          example: 'did:crvs-registry:345678912'
        issuanceDate:
          type: string
        expirationDate:
          type: string
        credentialSubject:
          $ref: '#/components/schemas/CredentialSubject'
        proof:
          $ref: '#/components/schemas/Proof'
    EligibilityDeterminationResponse:
      type: object
      properties:
        queryResponse:
          type: array
          items:
            anyOf:
              - $ref : '#/components/schemas/VerifiableCredentialIsAliveResponse'
    CredentialSubject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        id:
          type: string
        person:
          $ref: '#/components/schemas/HumanName'
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/Contact' 
    Address:
      type: object
      properties:
        city:
          type: string
        state:
          type: string
        country:
          type: string
    Contact:
      type: object
      properties:
        email:
          type: string
        phone:
          type: string
    Proof:
      type: object
      properties:
        type:
          type: string
          example: 'Ed25519Signature2018'        
        created:
          type: string
          example: '2023-05-09T12:34:56Z'      
        verificationMethod:
          type: string
          example: 'did:example:123#key-1'        
        proofPurpose:
          type: string
          example: 'assertionMethod'       
        jws:
          type: string
          example: 'eyJhbGciOiJFZDI1NTE5U2lnbmF0dXJlMjAxOCIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iHCBYnF2ovIe9hjaaxEC25N-2P8w4Qtf9zQBUV-zXnLHfYqzzubpI8f0mvmXdD6rvYB-9Zx_bFdK46e1IcblDA' 
    BirthDetail:
      type: object
      properties:
        nationalID:
          type: string
          example: ""
        firstName:
          type: string
          example: ""
        lastName:
          type: string
          example: ""
        gender:
          type: string
          example: ""
          enum:
            - male
            - female
            - other  
        
        placeOfBirth:
          type: object
          properties:
           region:
            type: string
            example: ""
           state:
            type: string
            example: ""
           country:
            type: string
            enum: [IN]
            example: ""
        dateOfBirth :
          type : string 
          format : date-time  
          example: ""
        relatedPersons:
          type: object
          properties:
            fathername:
             type: string
             example: ""
            mothername:
             type: string
             example: ""



    VerifiableCredentialIsAliveResponse:
      type: object
      properties:
        NationalId:
         type: string
         example: john.v@mosip
        is_alive:
          type: boolean
          example: true
    NotificationResponse:
      type: object
      description: CRVS Notification event
      properties:
        benefeciaryId:
          type: string
          description: '<br> 1. Beneficiary id is a normative case insensitive represenation represented as id@id-provider </br>'
          format: '^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+$'
          example: '12345@token.mosip'
        farmerRegistrationNumber:
          type: string
          description: Unique reference_id set by txn initiating system for each request in a batch
          example: '12345678901234567890'      
        event_code:
          type: string
          enum: [unregiser,update_benefeciary, update,land_ownership_changed,crop_detail_changed,unregister,demographic_update]
          description: 'To subscribe this event send this code in subscription request'
        farmer_data:
               $ref: '#/components/schemas/ApiResponse'
              
      required:
        - ReferenceId
        - BenefeciaryId
        - event_code
    IDRequest:
      type: object
      properties:
        identifier_list:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    IsFarmerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/IsFarmerCheckObject'           
    IsFarmerCheckObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        is_farmer:
          type: string
          enum: [yes,no]

  securitySchemes:
    spmis_auth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT