openapi: 3.0.3
info:
  title: CRVS interoperability APIs
  description: |-
    The CRVS interoperability APIs describes different APIs some of them are usecase specific and other are generalized APIs to perform interoperable operations between CRVS registry and SP system.  !
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in upcoming version.
    
    `CRVS APIs > ` The CRVS APIs section defines APIs that are usecase specific and suitable to implement scenario of where minimum data to be exposed via APIs 
    
    `Search API > ` The Search API provides functionality to search based on demographic, identifiers and custom query
    
    `Query APIs > ` The Query APIs facilate to accept usecases via term query and perform multiple operation in single API for multiple criteria
    
    `Event subscription > ` The Event subscription APIs describe APIs useful to subscribe / unsubscribe events. When any event happens in crvs registry it sends event details on notify end point
    
    `Request status checking API > ` The request status checking APIs implement to check status of request sent in any above APIs
    
    Gitbook reference link:
    - [CRVS - V1.0 ](https://app.gitbook.com/o/0iSqNDBWH70sLmGExne0/s/qxauqL1oEtZWtHYd2Uzz/dci/readme)
    
  version: 1.0.0
servers:
  - description: API host endpoint
    url: https://apihost/
tags:
  - name: CRVS APIs
    description: '' 
  - name: Search API
    description: '' 
  - name: Query APIs
    description: ''
  - name: Event subscription
    description: ''
  - name: Request status checking API 
    description: ''
paths:
  /isAlive:
    post:
      tags:
        - CRVS APIs
      summary: ''
      description: 'API to check if a person is alive or not based on ID' 
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IsAliveCheckRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/IsAliveCheckRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsAliveCheckResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/IsAliveCheckResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
      security:
        - spmis_auth:
            - read:search
  /getAge:
    post:
      tags:
        - CRVS APIs
      summary: 'API to retrieve the age of a person based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/IDRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgeResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/AgeResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'  
      security:
        - spmis_auth:
            - read:search
  /getMaritalStatus:
    post:
      tags:
        - CRVS APIs
      summary: 'API to retrieve marital status of a person based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/IDRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaritalStatusCheckResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/MaritalStatusCheckResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'  
      security:
        - spmis_auth:
            - read:search
  /getBirthInfo:
    post:
      tags:
        - CRVS APIs      
      summary: 'API that provides birth information for a person based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/IDRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BirthInfoResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/BirthInfoResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
 
      security:
        - spmis_auth:
            - read:search
  /getMarriageInfo:
    post:
      tags:
        - CRVS APIs      
      summary: 'API that provides marriage information for a person based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/IDRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarriageInfoResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/MarriageInfoResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'  
      security:
        - spmis_auth:
            - read:search
  /getDeathInfo:
    post:
      tags:
        - CRVS APIs      
      summary: 'API that provides death information for a person based on ID'
      description: '' 
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/IDRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeathInfoResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/DeathInfoResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/201'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
      security:
        - spmis_auth:
            - read:search
  /getPersonInfo:
    post:
      tags:
        - CRVS APIs      
      summary: 'API that provides person info based on an ID'
      description:  ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/IDRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDInfoLookupResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/IDInfoLookupResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
      security:
        - spmis_auth:
            - read:search
  /getParentInfo:
    post:
      tags:
        - CRVS APIs      
      summary: 'API that provides parents information of a person based on an ID'
      description:  ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/IDRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChildDemographicResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ChildDemographicResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
      security:
        - spmis_auth:
            - read:search
  /getFamilyinfo:
    post:
      tags:
        - CRVS APIs      
      summary: "The API retrieves family information, and the caller is required to provide either the father's or the mother's unique identification details"
      description:  ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetChildInfoRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetChildInfoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetChildInfoResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/GetChildInfoResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'  
      security:
        - spmis_auth:
            - read:search
  /getVitalEventDates:
    post:
      tags:
        - CRVS APIs
      summary: 'API that provides date of birth/date of death/marriage date based on ID'
      description: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/IDRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
              
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDEventDatesResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/IDEventDatesResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
      security:
        - spmis_auth:
            - read:search
  /getVitalEvents:
    post:
      tags:
        - CRVS APIs
      summary: 'API that provides life event details based on vital event type and data retrieved based on ID of person'
      description: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInfoRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/EventInfoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
              
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventInfoResponse'  
            application/xml:
              schema:
                $ref: '#/components/schemas/EventInfoResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
      security:
        - spmis_auth:
            - read:search

  /search:
    post:
      tags:
        - Search API
      summary: To perform search operation in registry
      description: The Search operation perfromed for registry 
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Search request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequestObject' 
          application/xml:
            schema:
              $ref: '#/components/schemas/SearchRequestObject'                   
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/SearchResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
      security:
        - spmis_auth:
            - read:search
  /on-search:
    post:
      tags:
        - Search API 
      summary: Search request call back, this end point to be implemented at SP system or any system which retieving data from registry
      description: The requester will pass information submitted in search and if response prepared then it will send content
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchResponse'
          application/xml:
            schema:
              $ref: '#/components/schemas/SearchResponse'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 

      security:
        - spmis_auth:
            - read:search
  /query:
    get:
      tags:
        - Query APIs 
      summary: ''
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                example: ['IS_ALIVE','GET_AGE','GET_MARITAL_STATUS','GET_BIRTH_INFO','GET_MARRIAGE_INFO','GET_DEATH_INFO','GET_PERSON_INFO','GET_PARENT_INFO','GET_VITAL_EVENT_DATES','GET_VITAL_EVENTS']
                items:
                  type: string

      security:
        - spmis_auth:
            - read:search
    post:
      tags:
        - Query APIs 
      summary: ''
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'     
          application/xml:
            schema:
              $ref: '#/components/schemas/QueryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/QueryResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
      security:
        - spmis_auth:
            - read:search
  /on-query:
    post:
      tags:
        - Query APIs 
      summary: ''
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryResponse'     
          application/xml:
            schema:
              $ref: '#/components/schemas/QueryResponse'  
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
             
      security:
        - spmis_auth:
            - read:search
  /subscription-list:
    get:
      tags:
        - Event subscription 
      summary: Get list of supported events in registry
      parameters:
        - $ref: "#/components/parameters/authorization"
      description: ''
      operationId: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                example: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DIVORCE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
                items:
                  type: string         

      security:
        - spmis_auth:
            - read:search
  /subscribe:
    post:
      tags:
        - Event subscription  
      summary: To subscribe for specific events
      description: Response will contain details of subscription
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'     
          application/xml:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
             
      security:
        - spmis_auth:
            - read:search
  /unsubscribe:
    post:
      tags:
        - Event subscription  
      summary: To un-subscribe for events
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: 'Request to un-subscribe'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnSubscribeRequest'     
          application/xml:
            schema:
              $ref: '#/components/schemas/UnSubscribeRequest'     
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnSubscribeResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/UnSubscribeResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'             
      security:
        - spmis_auth:
            - read:search
  /notify:
    post:
      tags:
        - Event subscription
      summary: The notify end point to be implemented at subscriber system. The registry will send event data on this end point.
      description: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventNotificationRequest'     
          application/xml:
            schema:
              $ref: '#/components/schemas/EventNotificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/EventResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'                  
      security:
        - spmis_auth:
            - read:search
  /status:
    post:
      tags:
        - Request status checking API 
      summary: ''
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: 'Request to un-subscribe'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestStatusCheckRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/RequestStatusCheckRequest'                   
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestStatusCheckResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/RequestStatusCheckResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'             
      security:
        - spmis_auth:
            - read:search
  /on-status:
    post:
      tags:
        - Request status checking API 
      summary: ''
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: 'Request to un-subscribe'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestStatusCheckResponse'     
          application/xml:
            schema:
              $ref: '#/components/schemas/RequestStatusCheckResponse' 
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'             
      security:
        - spmis_auth:
            - read:search
  
components:
  responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatus201' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpStatus201'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatus202' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpStatus202'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse400' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse400'                 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse401' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse401'                 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse403' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse403'                 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse404' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse404'                 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse405'
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse405'                 
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse422' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse422'                 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse500' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse500'                 
  parameters:
    authorization:
      name: Authorization
      in: header
      required: true
      description: Access token which was issued after successful login with gateway auth server.
      schema:
        type: string
        example: Bearer <...>        
    version:
      in: header
      name: x-api-version
      schema:
        type: string
        example: "1.0.0"
      required: false
      description: If not provided use latest api version as default
    x-timestamp:
      in: header
      name: timestamp
      schema:
        type: string
        example: "2022-12-04T18:01:07+00:00"
      required: true
      description: Timestamp of request when it was sent , ideally it should be GMT
    x-hmac:
      in: header
      name: x-hmac
      schema:
        type: string
        example: "bd4a82cd319ababe57d0a822049ae8985029f82237509d3f091c82cbc7a6945c"
      required: true
      description: Signature created in combination of {payload}+{x-timestamp:}+{x-sender-id}.This is usually encrypted string using HMAC-SHA-256 algorithm with the private key.
    x-registry-type:
      in: header
      name: x-registry-type
      schema:
        type: string
        enum: ['x-crvs']
      required: true
      description: This param used to decide which service to be called to retrieve data
    x-sender-id:
      in: header
      name: x-sender-id
      schema:
        type: string
        example: "SP_CRVS_2022"
      required: true
      description: Information about requester , it may be some code of SP system
    x-message-id:
      in: header
      name: x-message-id
      schema:
        type: string
        format: uuid
        example: 0c96614c-7255-4774-b109-cd53ee859000
      required: true
      description: UUID string to be sent in request header for tracking of request
    x-async:
      in: header
      name: x-async
      schema:
        type: string
        example: true
      required: true
      description: Async param indicate that response to be sent immediate or in call back, if _true_ send data in response if _false_ just return HTTP status 202
    x-callbackendpoint:
      in: header
      name: x-callbackendpoint
      schema:
        type: string
        example: "https://senderhost/callback/on-disburse"
      required: false
      description: If async response requested then this param to be supplied for receiving data in SP system, this is usually endpoint active in SP env

  schemas:

    MsgSignature:
      type: string
      description: 'Signature of {header}+{message} body verified using sender''s signing public key'
      example: 'Signature:  namespace="interoperability", kidId="{sender_id}|{unique_key_id}|{algorithm}", algorithm="ed25519", created="1606970629", expires="1607030629", headers="(created) (expires) digest", signature="Base64(signing content)'

    MsgHeader:
      type: object
      description: Message header
      properties:
        version:
          description: Messaing protocol specification version being used
          type: string
          example: 1.0.0
        message_id:
          description: 'Unique message id to communicate between sender and receiver systems to realiable deliver the message over any transport layer i.e https, pub/sub, sftp etc.,'
          type: string
          example: '123456789020211216223812'
        message_ts:
          description: Time of message generation in RFC3339 format
          type: string
          format: date-time
          example: '2022-12-04T18:01:07+00:00'
        sender_id:
          description: 'send id registered with the receiving system. Used for authorization, encryption, digital sign verfication, etc., functions.'
          type: string
          example: '10089'
        registry_type:
          description: 'The targeted resistry to which request to send'
          type: string
          example: 'OpenCRVS'
        total_count:
          description: Total no of requests present in the message request
          type: integer
          example: 21800
      required:
        - message_id
        - message_ts
        - action    
    AsyncHeaders:
      type: object
      description: Message header
      properties:
        async:
          description: It indiacte if true then async request else sender will expect response in same request , default is true.
          type: boolean
          format: uri
          example: true
        callbackendpoint:
          description: The callback url for async call
          type: string
          format: uri
          example: 'https://senderhost/callback/on-disburse'
    BaseRequestObject:
      type: object
      properties:
        signature:
          allOf:
            - $ref: '#/components/schemas/MsgSignature'      
        headers:
          allOf:
            - $ref: '#/components/schemas/MsgHeader'
    AsyncBaseRequestObject:
      type: object
      properties:
        signature:
          allOf:
            - $ref: '#/components/schemas/MsgSignature'      
        headers:
          allOf:
            - $ref: '#/components/schemas/MsgHeader'
            - $ref: '#/components/schemas/AsyncHeaders'
    IsAliveCheckRequest:
      allOf:
        - $ref: '#/components/schemas/AsyncBaseRequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            beneficiary:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/Identifier'
    IsAliveCheckResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/IsAliveCheckObject'
    IsAliveCheckObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        is_alive:
          type: string
          example: ''
          enum: [yes,no]
    IDRequest:
      allOf:
        - $ref: '#/components/schemas/AsyncBaseRequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            beneficiary:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/Identifier' 
    GetChildInfoRequest:
      allOf:
        - $ref: '#/components/schemas/AsyncBaseRequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            parent_ids:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/GetChildInfoRequestObject'       
    GetChildInfoRequestObject:
      type: object
      properties:
        father_indentifier:
          $ref: '#/components/schemas/Identifier'
        mother_indentifier:
          $ref: '#/components/schemas/Identifier'
    
    IDEventDatesRequest:
      type: object
      properties:
        beneficiary:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    BirthInfoResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/BirthInfo'
    DeathInfoResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/DeathInfo'
      
    EventInfoRequest:
      allOf:
        - $ref: '#/components/schemas/AsyncBaseRequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            beneficiary:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/EventInfoRequestObject'       

    
    EventInfoResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/EventInfoResponseObject'
    EventInfoResponseObject:
      type: object
      properties:
        correlation_id:
          type: string
          example: ''
        vital_event:
          type: string
          example: ''
          enum: ['birth','death','marriage']
        vital_event_data:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BirthInfo'
              - $ref: '#/components/schemas/DeathInfo'
              - $ref: '#/components/schemas/MarriageInfoObject'
    ChildInfo:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        date_of_birth:
          $ref: '#/components/schemas/DateObject'
        gender:
          type: string
          example: ''
          enum: ['0|Never Married','1|Male','2|Female','3|Not applicable']          
        birth_registration_no:
          type: string
          example: ''
        birth_place_address:
          $ref: '#/components/schemas/Address'
    DateObject:
      type: object
      properties:
        day:
          type: string
          example: ''
        month: 
          type: string
          example: ''
        year: 
          type: string
          example: ''       
        
    BirthInfo:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        father_name:
          $ref: '#/components/schemas/HumanName'
        mother_name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: ''
        date_of_birth:
          $ref: '#/components/schemas/DateObject'
        gender:
          type: string
          example: ''
          enum: ['0|Never Married','1|Male','2|Female','3|Not applicable']          
        birth_registration_no:
          type: string
          example: ''
        birth_place_address:
          $ref: '#/components/schemas/Address'
          
    DeathInfo:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: ''
        date_of_death:
          $ref: '#/components/schemas/DateObject'
        gender:
          type: string
          example: ''
          enum: ['0|Never Married','1|Male','2|Female','3|Not applicable']             
        death_registration_no:
          type: string
          example: ''
        death_place_address:
          $ref: '#/components/schemas/Address'
    EventInfoRequestObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        vital_event:
          type: string
          example: ''
          enum: ['birth','death','marriage']
        correlation_id:
          type: string
          example: ''
    IDEventDatesResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/IDEventDatesObject'
    IDEventDatesObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: ''
        date_of_birth:
          $ref: '#/components/schemas/DateObject'
        date_of_death:
          $ref: '#/components/schemas/DateObject'
        date_of_marriage:
          $ref: '#/components/schemas/DateObject'
        gender:
          type: string
          example: ''
          enum: ['0|Never Married','1|Male','2|Female','3|Not applicable']          
 
    IDInfoLookupResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/IDInfoLookupObject'
    IDInfoLookupObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: ''
        date_of_birth:
          $ref: '#/components/schemas/DateObject'
        gender:
          type: string
          example: ''
          enum: ['0|Never Married','1|Male','2|Female','3|Not applicable']          

          
    GetParentInfoRequest:
      type: object
      properties:
        beneficiary:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'        
      
    ChildDemographicResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/ChildDemographicObject'
    ChildDemographicObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        father_name:
          $ref: '#/components/schemas/HumanName'
        mother_name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: ''
        date_of_birth:
          $ref: '#/components/schemas/DateObject'
        date_of_death:
          $ref: '#/components/schemas/DateObject'
        gender:
          type: string
          example: ''
          enum: ['0|Never Married','1|Male','2|Female','3|Not applicable']          



    AgeResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/CategoryCheckObject'
    CategoryCheckObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        age:
          type: number
          example: ''
    MaritalStatusCheckRequest:
      type: object
      properties:
        beneficiary:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    MaritalStatusCheckResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/MaritalStatusCheckObject'
    MaritalStatusCheckObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        marital_status:
          type: string
          example: ''
          enum: ['1|Never Married','2|Currently Married','3|Widow / Widower','4|Divorced','5|Separated']

              
    MarriageInfoRequest:
      type: object
      properties:
        beneficiary:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    MarriageInfoResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/MarriageInfoObject'
    MarriageInfoObject:
      type: object
      properties:
        groom_identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        groom_name:
          $ref: '#/components/schemas/HumanName'
        groom_nationality:
          type: string
          example: ''
        groom_date_of_birth:
          $ref: '#/components/schemas/DateObject'
        bride_identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        bride_name:
          $ref: '#/components/schemas/HumanName'
        bride_nationality:
          type: string
          example: ''
        bride_date_of_birth:
          $ref: '#/components/schemas/DateObject'
        date_of_marriage:
          $ref: '#/components/schemas/DateObject'
        place_of_marriage:
          $ref: '#/components/schemas/Address'
        marriage_registration_number:
          type: string
          example: ''     


    GetChildInfoResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            anyOf:
              - $ref: '#/components/schemas/GetChildInfoResponseObject'
    GetChildInfoResponseObject:
      type: object
      properties:
        correlation_id:
          type: string
          example: ''
          description: The transaction_id to track request response
        child_data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/ChildInfo'
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          example: ''
        return_message:
          type: string
          example: ''
        correlation_id:
          type: string
          example: ''
          description: The transaction_id to track request response

    HumanName:
      type: object
      properties:
        suffix:
          type: string
          example: ''
        prefix:
          type: string
          example: ''
        first_name:
          type: string
          example: ''
        middle_name:
          type: string
          example: ''
        last_name:
          type: string
          example: ''


 
    Address:
      type: object
      properties:
        house_no:
          type: string
          example: ''
        address_line_1:
          type: string
          example: ''
        address_line_2:
          type: string
          example: ''          
        district:
          type: string
          example: ''          
        state:
          type: string
          example: ''          
        postal_code:
          type: string
          example: ''

    SearchRequestObject:
      allOf:
        - $ref: '#/components/schemas/AsyncBaseRequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            identifiers:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/Identifier'
            demographic:
              $ref : '#/components/schemas/SearchCriteria'
            custom_query:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/NameField'
                  - $ref: '#/components/schemas/ExpressionAnd'
                  - $ref: '#/components/schemas/Repositories'
            sortby:
              $ref: '#/components/schemas/Sort'
            pagination:
              $ref: '#/components/schemas/Pagination'

    SearchCriteria:
      type: object
      properties:
        name:
          type: string
          example: ''
        given_name:
          type: string
          example: ''
        family_name:
          type: string
          example: ''
        middle_name:
          type: string
          example: ''
        gender:
          type: string
          example: ''
        birthdate:
          type: string
          example: ''
        place_of_birth:
          type: string
          example: ''
        status:
          type: string
          example: ''
        nationality:
          type: string
          example: ''
        attributes:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Attribute'
            
    Attribute:
      type: object
      properties:
        name:
          type: string
          example: 'attribute name'
        value:
          type: string
          example: 'attribute value'

    ExpressionAnd:
      type: object
      properties:
        expression:
          type: string
          enum: [and]
        
    NameField:
      description: 'Search by name'        
      allOf: 
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: ''
              enum: ['firstname']
            operator:
              $ref: '#/components/schemas/FieldOperatorAnd'
            value: 
              type: string
              example: ''
              description: 'Search by firstname'
 
    Repositories:
      allOf: 
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: ''
              enum: ['repository_type']
            operator:
              $ref: '#/components/schemas/FieldOperatorAnd'
            value: 
              type: string
              example: ''
              enum: ['Birth', 'Death', 'Marriage']
              description: 'Search by repository_type type'
 
    FieldOperatorAnd:
      type: string
      enum:
        - and
    Sort:
      type: object
      properties:
        fieldname:
          type: string
          example: ''
          enum: [firstname,dob]
        order:
          type: string
          example: ''
          enum: ["asc","desc"]
    Pagination:
      type: object
      properties:
        page_size:
          type: number
          example: 10
        page_number:
          type: number
          example: 5  
    EventResponse:
      type: object
      properties:
        event_status:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BaseResponse'
    BaseResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['success','failure']
          example: ''
        return_message:
          type: string
          example: ''
        correlation_id:
          type: string
          example: ''
          description: The request id will be returned in response as correlation_id
    SearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SearchResponseObjectArray'
    SearchResponseObjectArray:
      type: object
      properties:
        correlation_id:
          type: string
          example: ''
          description: The transaction_id received in request
        search_data: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SearchResponseObject'
    SearchResponseObject:
      type: object
      properties:
        correlation_id:
          type: string
          example: ''
          description: The transaction_id received in request
        identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          $ref : '#/components/schemas/DateObject'
        date_of_birth:
          $ref : '#/components/schemas/DateObject'
        date_of_death:
          $ref : '#/components/schemas/DateObject'
        gender:
          type: string
          example: ''
          enum: ['1|male','2|female','3|transgender']
    FileUploadRequest:
      type: object
      properties:
        file_name:
          type: string
          format: binary
        file_type:
          type: string
          example: csv
          enum: [json,csv,xml]
        message_id:
          type: string 

    QueryRequest:
      allOf:
        - $ref: '#/components/schemas/AsyncBaseRequestObject'
      type: object
      description: '' 
      properties:
        payload:
          type: array
          items:
            type: object
            anyOf:
              - $ref: '#/components/schemas/QueryRequestObject'
    QueryRequestObject:
      type: object
      description: '' 
      properties:
        type:
          type: string
          example: ''
        value:
          type: string
          example: ''
        query:
          type: string
          example: ''
    QueryResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      description: '' 
      properties:
        data:
          type: array
          items:
            type: object
            anyOf:
              - $ref: '#/components/schemas/QueryResponseObject'
            example: '{}'
    QueryResponseObject:
      allOf:
        - $ref: '#/components/schemas/QueryRequestObject'      
      type: object
      description: '' 
      properties:
        data:
          type: string
          example: '{field1:value,}'
        
    RequestStatusCheckRequest:
      allOf:
        - $ref: '#/components/schemas/AsyncBaseRequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            request_ids:
              type: array
              example: ''
              items:
                anyOf:
                  - $ref: '#/components/schemas/RequestIdObject'
    RequestIdObject:
      type: object
      properties:
        message_id:
          type: string
          example: ''
    RequestStatusObject:
      type: object
      properties:
        correlation_id:
          type: string
          example: ''
        status:
          type: string
          example: ''
          enum: ['received','processing','processed','failed','invalid_request_id']
    RequestStatusCheckResponse:
      type: object
      properties:
        data:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/RequestStatusObject'

    SubscriptionRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            event_info:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/EventInfo'
            client_id:
              type: string
              example: ''
            custom_filter:
              type: object
              example:
                region: ''
    SubscriptionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionResponseObject'
    UnSubscribeResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        data: 
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionResponseObject'    
    SubscriptionResponseObject:
      type: object
      properties:
        event_code:
          type: string
          example: ''
          enum: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DIVORCE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
        registration_id:
          type: string
          example: ''
        status:
          type: string
          example: ''

    UnSubscribeRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            event_code:
              type: array
              items:
                type: string
              example: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DIVORCE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
              description: 'To subscribe this event send this code in subscription request'
            client_id:
              type: string
              example: ''
            reason:
              type: string  
              example: ''
    EventNotificationRequest:
      type: object
      properties:
        success:
          type: string
          example: ''
        return_message:
          type: string
          example: ''
        error_code:
          type: string
          example: ''        
        corellation_id:
          type: string
          example: ''
          description: The corellation_id received in request
        data: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BirthRegistrationEventInfo'
              - $ref: '#/components/schemas/MarriageRegistrationEventInfo'
              - $ref: '#/components/schemas/DeathRegistrationEventInfo'          
    EventInfo:
      type: object
      properties:
        code:
          type: string
          example: ''
          enum: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DIVORCE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
        frequency:
          type: string
          example: ''
          enum: ['immediate','hourly','daily','weekly']
        response_fields:
          type: array
          example: '[]'
          items:
            type: string 
            enum: ['name', 'birthdate','birth_registration_number']
        callback_url:
          type: string
          example: ''
    BirthRegistrationEventInfo:
      type: object
      properties:
        event_code:
          type: string
          example: ''
          enum: ["BIRTH_REGISTRATION"]
        correlation_id:
          type: string
          example: ''
          description: The transaction_id received in request
        event_data:
          $ref : '#/components/schemas/CRVSSearchByBRNResponse'
    MarriageRegistrationEventInfo:
      type: object
      properties:
        event_code:
          type: string
          example: ''
          enum: ["MARRIAGE_REGISTRATION"]
        correlation_id:
          type: string
          example: ''
          description: The transaction_id received in request
        event_data:
          $ref : '#/components/schemas/CRVSSearchByMRNResponse'    
    CRVSSearchByMRNResponse:
      type: object
      properties:
        groom_identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        groom_name:
          $ref: '#/components/schemas/HumanName'
        groom_father_name:
          $ref: '#/components/schemas/HumanName'
        groom_mother_name:
          $ref: '#/components/schemas/HumanName'
        groom_nationality:
          type: string
          example: ''
        groom_date_of_birth:
          type: string
          example: ''        
        groom_marital_status:
          type: string
          example: ''
          enum: [unmarried,divorced,widowed]
        bride_identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        bride_name:
          $ref: '#/components/schemas/HumanName'
        bride_father_name:
          $ref: '#/components/schemas/HumanName'
        bride_mother_name:
          $ref: '#/components/schemas/HumanName'
        bride_nationality:
          type: string
          example: ''
        bride_date_of_birth:
          $ref : '#/components/schemas/DateObject'
        bride_marital_status:
          type: string
          example: ''
          enum: [unmarried,divorced,widowed]
        contactno:
          type: string
          example: ''
        date_of_marriage:
          $ref : '#/components/schemas/DateObject'
        place_of_marriage:
          type: string
          example: ''
        marriage_registration_number:
          type: string
          example: ''

    DeathRegistrationEventInfo:
      type: object
      properties:
        event_code:
          type: string
          example: ''
          enum: ["DEATH_REGISTRATION"]
        correlation_id:
          type: string
          example: ''
          description: The transaction_id received in request
        event_data:
          $ref : '#/components/schemas/CRVSSearchByDRNResponse'    
    CRVSSearchByBRNResponse:
      type: object
      properties:
        identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
              - $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        father_name:
          $ref: '#/components/schemas/HumanName'
        mother_name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
        date_of_birth:
          type: string
          example: ''
        date_of_death:
          type: string
          example: ''
        gender:
          type: string
          example: ''          
        birth_registration_number:
          type: string
          example: ''
        death_registration_number:
          type: string            
          example: ''
    CRVSSearchByDRNResponse:
      type: object
      properties:
        identifier:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        father_name:
          $ref: '#/components/schemas/HumanName'
        mother_name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
          example: ''
        date_of_birth:
          type: string
          example: ''
        date_of_death:
          type: string
          example: ''
        gender:
          type: string
          example: ''
        birth_registration_number:
          type: string
          example: ''
        death_registration_number:
          type: string
          example: '' 
    Identifier:
      type: object
      properties:
        type:
          type: string
          example: ''
          enum: ['0|Foundational ID Number','1|Birth Registration Number','2|Marriage Registration Number','3|Death Registration Number']
        value:
          type: string
          example: ''
    HttpStatus201:
      type: object
      description: HTTP layer error details
      properties:
        status:
          type: string
          example: ''
        return_message:
          type: string
          example: ''
        correlation_id:
          type: string
          example: ''
          description: ''
    HttpStatus202:
      type: object
      description: HTTP layer error details
      properties:
        status:
          type: string
          example: ''
        return_message:
          type: string
          example: ''
        correlation_id:
          type: string
          example: ''
          description: ''
    HttpErrorResponse400:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-400-01'   
        error_message:
          type: string
          example: 'Bad Request'
    HttpErrorResponse401:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-401-01'   
        error_message:
          type: string
          example: 'Unauthorized' 
    HttpErrorResponse403:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-403-01'      
        error_message:
          type: string
          example: 'Forbidden'   
    HttpErrorResponse404:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-404-01'   
        error_message:
          type: string
          example: 'Not Found'
    HttpErrorResponse422:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-422-01'   
        error_message:
          type: string
          example:    
    HttpErrorResponse405:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-405-01'       
        error_message:
          type: string
          example: 'Method Not Allowed'
    HttpErrorResponse500:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-500-01'   
        error_message:
          type: string
          example: 'Internal server error' 
  securitySchemes:
    spmis_auth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT