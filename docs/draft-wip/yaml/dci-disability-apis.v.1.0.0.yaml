openapi: 3.0.3
info:
  title: Disability registry APIs
  description: ' '
  version: 0.0.1
servers:
  - description: Disability registry access point
    url: https://localhost:8081/
tags:
  - name: Search API
    description: ''
  - name: Request status checking API 
    description: ''
  - name: Query APIs
    description: ''
  - name: Event subscription
    description: ''
  - name: Disability Registry API
    description: 'Use case specific APIs'

paths:
  /search:
    post:
      tags:
        - Search API
      summary: To perform search operation in registry
      description: The Search operation perfromed for registry 
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Search request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequestObject' 
          application/xml:
            schema:
              $ref: '#/components/schemas/SearchRequestObject'                   
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/SearchResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
      security:
        - spmis_auth:
            - read:search
  /on-search:
    post:
      tags:
        - Search API 
      summary: Search request call back, this end point to be implemented at SP system or any system which retieving data from registry
      description: The requester will pass information submitted in search and if response prepared then it will send content
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: Search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchResponse'
          application/xml:
            schema:
              $ref: '#/components/schemas/SearchResponse'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 

      security:
        - spmis_auth:
            - read:search

  /getDisablePersonList:
    post:
      tags:
        - Disability Registry API
      summary: 'API to retrieve list of disabled person based on disability_type(optional) /location(optional) / disability_percentage(optional) / registration_year(optional) '
      description: ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDisablePersonListRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDisablePersonListResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /isDisable:
    post:
      tags:
        - Disability Registry API
      summary: 'API to chek if person is disable or not'
      description: ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckIsDisableRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckIsDisableResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search

  /getDisabilityInfo:
    post:
      tags:
        - Disability Registry API
      summary: 'API to retrieve all disability of person'
      description: ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisabilityInfoRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisablePersonInfoResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /getCorrespondentInfo:
    post:
      tags:
        - Disability Registry API
      summary: 'API to retrieve correspondent details of disable of person'
      description: ''
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/x-hmac"
        - $ref: "#/components/parameters/authorization"
        - $ref: '#/components/parameters/x-registry-type'
        - $ref: '#/components/parameters/x-message-id'
        - $ref: '#/components/parameters/x-timestamp'
        - $ref: '#/components/parameters/x-sender-id'
        - $ref: '#/components/parameters/x-async'
        - $ref: '#/components/parameters/x-callbackendpoint'
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorrespondentInfoRequest'     
        required: true
      responses:
        '102':
          description: Processing 
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorrespondentInfoResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
      security:
        - spmis_auth:
            - read:search
  /query:
    get:
      tags:
        - Query APIs 
      summary: ''
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                example: ['is_alive','get_age','get_marital_status','get_birth_info','get_marriage_info','get_death_info','get_person_info','get_parent_info','get_vital_event_dates','get_vital_events']
                items:
                  type: string

      security:
        - spmis_auth:
            - read:search
    post:
      tags:
        - Query APIs 
      summary: ''
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'     
          application/xml:
            schema:
              $ref: '#/components/schemas/QueryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/QueryResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
      security:
        - spmis_auth:
            - read:search
  /on-query:
    post:
      tags:
        - Query APIs 
      summary: ''
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryResponse'     
          application/xml:
            schema:
              $ref: '#/components/schemas/QueryResponse'  
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
             
      security:
        - spmis_auth:
            - read:search

  /subscription-list:
    get:
      tags:
        - Event subscription 
      summary: Get list of supported events in registry
      parameters:
        - $ref: "#/components/parameters/authorization"
      description: ''
      operationId: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                example: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DIVORCE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
                items:
                  type: string         

      security:
        - spmis_auth:
            - read:search
  /subscribe:
    post:
      tags:
        - Event subscription  
      summary: To subscribe for specific events
      description: Response will contain details of subscription
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'     
          application/xml:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
             
      security:
        - spmis_auth:
            - read:search
  /unsubscribe:
    post:
      tags:
        - Event subscription  
      summary: To un-subscribe for events
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: 'Request to un-subscribe'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnSubscribeRequest'     
          application/xml:
            schema:
              $ref: '#/components/schemas/UnSubscribeRequest'     
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnSubscribeResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/UnSubscribeResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'             
      security:
        - spmis_auth:
            - read:search
  /notify:
    post:
      tags:
        - Event subscription
      summary: The notify end point to be implemented at subscriber system. The registry will send event data on this end point.
      description: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventNotificationRequest'     
          application/xml:
            schema:
              $ref: '#/components/schemas/EventNotificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/EventResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'                  
      security:
        - spmis_auth:
            - read:search
  /status:
    post:
      tags:
        - Request status checking API 
      summary: ''
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: 'Request to un-subscribe'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestStatusCheckRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/RequestStatusCheckRequest'                   
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestStatusCheckResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/RequestStatusCheckResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary                

        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'             
      security:
        - spmis_auth:
            - read:search
  /on-status:
    post:
      tags:
        - Request status checking API 
      summary: ''
      description: ''
      operationId: ''
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        description: 'Request to un-subscribe'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestStatusCheckResponse'     
          application/xml:
            schema:
              $ref: '#/components/schemas/RequestStatusCheckResponse' 
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'     
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '201':
          $ref: '#/components/responses/201'
        '202':
          $ref: '#/components/responses/202'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'             
      security:
        - spmis_auth:
            - read:search

components:
  parameters:
    authorization:
      name: Authorization
      in: header
      required: true
      description: Access token which was issued after successful login with gateway auth server.
      schema:
        type: string
        example: Bearer <...>        
    version:
      in: header
      name: x-api-version
      schema:
        type: string
        example: "1.0.0"
      required: false
      description: If not provided use latest api version as default
    x-timestamp:
      in: header
      name: timestamp
      schema:
        type: string
        example: "2022-12-04T18:01:07+00:00"
      required: true
      description: Timestamp of request when it was sent , ideally it should be GMT
    x-hmac:
      in: header
      name: x-hmac
      schema:
        type: string
        example: "bd4a82cd319ababe57d0a822049ae8985029f82237509d3f091c82cbc7a6945c"
      required: true
      description: Signature created in combination of {payload}+{x-timestamp:}+{x-sender-id}.This is usually encrypted string using HMAC-SHA-256 algorithm with the private key.
    x-registry-type:
      in: header
      name: x-registry-type
      schema:
        type: string
        enum: ['x-disability']
      required: true
      description: This param used to decide which service to be called to retrieve data
    x-sender-id:
      in: header
      name: x-sender-id
      schema:
        type: string
        example: "NOBLE_SP_PROGRAMME"
      required: true
      description: Information about requester , it may be some code of SP system
    x-message-id:
      in: header
      name: x-message-id
      schema:
        type: string
        format: uuid
        example: 0c96614c-7255-4774-b109-cd53ee859000
      required: true
      description: UUID string to be sent in request header for tracking of request
    x-async:
      in: header
      name: x-async
      schema:
        type: string
        example: true
      required: true
      description: Async param indicate that response to be sent immediate or in call back, if _true_ send data in response if _false_ just return HTTP status 202
    x-callbackendpoint:
      in: header
      name: x-callbackendpoint
      schema:
        type: string
        example: "https://{server_url}/notify"
      required: false
      description: If async response requested then this param to be supplied for receiving data in SP system, this is usually endpoint active in SP env
  schemas:
    MsgSignature:
      type: string
      description: 'Signature of {header}+{message} body verified using sender''s signing public key'
      example: 'Signature:  namespace="dci", kidId="{sender_id}|{unique_key_id}|{algorithm}", algorithm="ed25519", created="1606970629", expires="1607030629", headers="(created) (expires) digest", signature="Base64(signing content)'

    MsgHeader:
      type: object
      description: Message header
      properties:
        version:
          description: Messaing protocol specification version being used
          type: string
          example: 1.0.0
        message_id:
          description: 'Unique message id to communicate between sender and receiver systems to realiable deliver the message over any transport layer i.e https, pub/sub, sftp etc.,'
          type: string
          example: '123456789020211216223812'
        message_ts:
          description: Time of message generation in RFC3339 format
          type: string
          format: date-time
          example: '2022-12-04T18:01:07+00:00'
        sender_id:
          description: 'send id registered with the receiving system. Used for authorization, encryption, digital sign verfication, etc., functions.'
          type: string
          example: '10089'
        registry_type:
          description: 'The targeted resistry to which request to send'
          type: string
          example: 'OpenCRVS'
        total_count:
          description: Total no of requests present in the message request
          type: integer
          example: 10
      required:
        - message_id
        - message_ts
        - action    
    AsyncHeaders:
      type: object
      description: Message header
      properties:
        async:
          description: It indiacte if true then async request else sender will expect response in same request , default is true.
          type: boolean
          format: uri
          example: true
        callbackendpoint:
          description: The callback url for async call
          type: string
          format: uri
          example: 'https://{server_url}/notify'  
    SearchRequestObject:
      allOf:
        - $ref: '#/components/schemas/AsyncBaseRequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            identifiers:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/Identifier'
            demographic:
              $ref : '#/components/schemas/SearchCriteria'
            custom_query:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/NameField'
                  - $ref: '#/components/schemas/ExpressionAnd'
                  - $ref: '#/components/schemas/Repositories'
            sortby:
              $ref: '#/components/schemas/Sort'
            pagination:
              $ref: '#/components/schemas/Pagination'    
    AsyncBaseRequestObject:
      type: object
      properties:
        signature:
          allOf:
            - $ref: '#/components/schemas/MsgSignature'      
        headers:
          allOf:
            - $ref: '#/components/schemas/MsgHeader'
            - $ref: '#/components/schemas/AsyncHeaders'
    FileUploadRequest:
      type: object
      properties:
        file_name:
          type: string
          format: binary
        file_type:
          type: string
          example: csv
          enum: [json,csv,xml]
        message_id:
          type: string 
    Attribute:
      type: object
      properties:
        name:
          type: string
          example: 'attribute name'
        value:
          type: string
          example: 'attribute value'
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          example: ''
        return_message:
          type: string
          example: ''
        correlation_id:
          type: string
          example: ''
          description: The transaction_id to track request response
        total_count:
          description: Total no of record present in the message
          type: integer
          example: 10
    FieldOperatorAnd:
      type: string
      enum:
        - and
    Sort:
      type: object
      properties:
        fieldname:
          type: string
          example: ''
          enum: [firstname,dob]
        order:
          type: string
          example: ''
          enum: ["asc","desc"]
    Pagination:
      type: object
      properties:
        page_size:
          type: number
          example: 10
        page_number:
          type: number
          example: 1  
    PaginationInfoInResponse:
      type: object
      properties:
        page_size:
          type: number
          example: 10
        page_number:
          type: number
          example: 1
        total_records:
          type: number
          example: 20
          
    EventResponse:
      type: object
      properties:
        event_status:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BaseResponse'
    Repositories:
      allOf: 
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: ''
              enum: ['repository_type']
            operator:
              $ref: '#/components/schemas/FieldOperatorAnd'
            value: 
              type: string
              example: ''
              enum: ['Birth', 'Death', 'Marriage']
              description: 'Search by repository_type type'
    ExpressionAnd:
      type: object
      properties:
        expression:
          type: string
          enum: [and]
        
    NameField:
      description: 'Search by name'        
      allOf: 
        - type: object
          required:
            - fieldname
            - value
          properties: 
            fieldname:
              type: string
              example: ''
              enum: ['firstname']
            operator:
              $ref: '#/components/schemas/FieldOperatorAnd'
            value: 
              type: string
              example: ''
              description: 'Search by firstname'
    SearchCriteria:
      type: object
      properties:
        name:
          type: string
          example: ''
        given_name:
          type: string
          example: ''
        family_name:
          type: string
          example: ''
        middle_name:
          type: string
          example: ''
        gender:
          type: string
          example: ''
        birthdate:
          type: string
          example: ''
        place_of_birth:
          type: string
          example: ''
        status:
          type: string
          example: ''
        nationality:
          type: string
          example: ''
        attributes:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Attribute'
    SearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        payload: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SearchResponseObjectArray'
    SearchResponseObjectArray:
      type: object
      properties:
        beneficiary: 
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SearchResponseObject'
    GetDisablePersonListRequest:
      type: object
      properties:
        disability_type:
          type: string
          example: 'Vision'
        location:
          type: string
          example: 'South-East'
        disability_percentage:
          type: string
          example: '50'
        registration_year:
          type: string
          example: '2023'
    SearchResponseObject:
      type: object
      properties:
        identifiers:
          type: object
          properties:
            identifier:
              $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          $ref : '#/components/schemas/DateObject'
        date_of_birth:
          $ref : '#/components/schemas/DateObject'
        date_of_death:
          $ref : '#/components/schemas/DateObject'
        gender:
          type: string
          example: ''
          enum: ['1|male','2|female','3|transgender']
    GetDisablePersonListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DisablePersonBaseInfo' 
    CheckIsDisableRequest:
      type: object
      properties:
        identifier_list:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    CheckIsDisableResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      properties:
        disable_persion_info:
          $ref: '#/components/schemas/CheckIsDisableObject'
    CheckIsDisableObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        is_disable:
          type: string
          enum: ['yes','no']
          example: 'yes'
    DisabilityInfoRequest:
      type: object
      properties:
        identifier_list:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    DisablePersonInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      properties:
        data:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/DisablePersonWithDisability'

    DisablePersonBaseInfo:
      properties:
        identifier:
          type: array
          example: '[{"type": "NATIONAL_ID","value": "345678912"},{"type": "DISABILITY_REG_NO","value": "DR20230502002"}]'
          items:
            anyOf:
              - $ref: '#/components/schemas/Identifier'      
        name:
          $ref: '#/components/schemas/HumanName'
        contactno:
          type: string
        date_of_birth:
          type: string
          example: '11/17/1980'
        gender:
          type: string
          example: 'male'       
          enum: ['male','female','transgender'] 
        certificate_issue_date:
          type: string
          example: '11/17/1985'
    DisablePersonWithDisability:
      allOf:
        - $ref: '#/components/schemas/DisablePersonBaseInfo'
      properties:
        disability_list:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/DisabilityInfo'      
    DisabilityInfo:
      type: object
      properties:
        registration_id:
          type: string
          example: 'DR20230502002-001'
        disability_since:
          type: string
          example: '01-Jun-2015'
        disability_type:
          type: string
          example: 'Vision | Blindness both eyes'
        disability_percentage:
          type: string
          example: '100'
        by_birth:
          type: string
          example: 'Yes'
        disability_dueto:
          type: string
          example: 'Diseases'

    CorrespondentInfoRequest:
      type: object
      properties:
        identifier_list:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Identifier'
    CorrespondentInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      properties:
        data:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/CorrespondentInfoObject'
    CorrespondentInfoObject:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier' 
        name:
          $ref: '#/components/schemas/HumanName'        
        relation:
          type: string
          enum: ['father','mother','husband','wife','daughter','son']
        contactno:
          type: string
          example: '+91 999999999'
    BaseResponse:
      type: object
      properties:
        success:
          type: string
        return_message:
          type: string
        error_code:
          type: string
        transaction_id:
          type: string
          example: 0c96614c-7255-4774-b109-cd53ee859000
          description: The transaction_id received in request
    HumanName:
      type: object
      properties:
        suffix:
          type: string
          example: PhD
        prefix:
          type: string
          example: Mr.
        first_name:
          type: string
          example: john
        middle_name:
          type: string
          example: doe
        last_name:
          type: string
          example: doe
    Identifier:
      type: object
      properties:
        type:
          type: string
          enum: ['NATIONAL_ID','DISABILITY_REG_NO']
        value:
          type: string
          example: 345678912
    IdentifierWithTransactionId:
      type: object
      properties:
        identifier:
           $ref: '#/components/schemas/Identifier'
        transaction_id:
          type: string
          example: '0c96614c-7255-4774-b109-cd53ee859000'
    HttpErrorResponse:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
        error_message:
          type: string
    DateObject:
      type: object
      properties:
        day:
          type: string
          example: ''
        month: 
          type: string
          example: ''
        year: 
          type: string
          example: ''  
    HttpStatus201:
      type: object
      description: HTTP layer error details
      properties:
        ack_status:
          type: string
          example: ''
        timestamp:       
          description: Time of message generation in RFC3339 format
          type: string
          format: date-time
        error:
          $ref: '#/components/schemas/Error'
        correlation_id:
          type: string
          example: ''
          description: ''
    Error:
      type: object
      properties:
        code:
          type: string
          example: ''
        message: 
          type: string
          example: ''          
    SubscriptionRequest:
      allOf:
        - $ref: './common.yaml#/components/schemas/RequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            events:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/EventInfo'
            client_id:
              type: string
              example: ''
            custom_filter:
              type: object
              example:
                region: ''
    BaseRequestObject:
      type: object
      properties:
        signature:
          allOf:
            - $ref: '#/components/schemas/MsgSignature'      
        headers:
          allOf:
            - $ref: '#/components/schemas/MsgHeader'

    EventInfo:
      type: object
      properties:
        code:
          type: string
          example: ''
          enum: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DIVORCE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
        frequency:
          type: string
          example: ''
          enum: ['immediate','hourly','daily','weekly']
        response_fields:
          type: array
          example: '[]'
          items:
            type: string 
            enum: ['name', 'birthdate','birth_registration_number']
        callback_url:
          type: string
          example: ''
    SubscriptionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        payload: 
          type: array
          items:
            type: object
            anyOf:
              - $ref: '#/components/schemas/SubscriptionList'
    SubscriptionList:
      type: object
      properties:
        subscription:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionObject'
    SubscriptionObject:
      type: object
      properties:
        event_code:
          type: string
          example: ''
          enum: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DIVORCE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
        registration_id:
          type: string
          example: ''
        status:
          type: string
          example: ''
    EventNotificationRequest:
      type: object
      properties:
        success:
          type: string
          example: ''
        return_message:
          type: string
          example: ''
        error_code:
          type: string
          example: ''        
        corellation_id:
          type: string
          example: ''
          description: The corellation_id received in request
        payload: 
          type: string
          example: 'Work in progress'

    RequestStatusCheckRequest:
      allOf:
        - $ref: './common.yaml#/components/schemas/RequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            request_ids:
              type: array
              example: ''
              items:
                anyOf:
                  - $ref: '#/components/schemas/RequestIdObject'
    RequestIdObject:
      type: object
      properties:
        message_id:
          type: string
          example: ''
    RequestStatusObject:
      type: object
      properties:
        correlation_id:
          type: string
          example: ''
        status:
          type: string
          example: ''
          enum: ['received','processing','processed','failed','invalid_request_id']
    RequestStatusCheckResponse:
      type: object
      properties:
        payload:
          type: array
          items:
            type: object
            anyOf:
              - $ref: '#/components/schemas/RequestStatusObjectList'
    RequestStatusObjectList:
      type: object
      properties:
        status:
          type: array
          items:
            $ref: '#/components/schemas/RequestStatusObject'    
    UnSubscribeRequest:
      allOf:
        - $ref: '#/components/schemas/BaseRequestObject'
      type: object
      properties:
        payload:
          type: object
          properties:
            event_code:
              type: array
              items:
                type: string
              example: ["BIRTH_REGISTRATION", "DEATH_REGISTRATION","MARRIAGE_REGISTRATION","DIVORCE_REGISTRATION","DEMOGRAPHIC_UPDATE"]
              description: 'To subscribe this event send this code in subscription request'
            client_id:
              type: string
              example: ''
            reason:
              type: string  
              example: ''
    QueryRequest:
      allOf:
        - $ref: './common.yaml#/components/schemas/RequestObject'
      type: object
      description: '' 
      properties:
        payload:
          type: array
          items:
            type: object
            anyOf:
              - $ref: '#/components/schemas/QueryRequestObject'              
    QueryRequestObject:
      type: object
      properties:
        query_object:
          type: array
          items:
            $ref: '#/components/schemas/Query'    
    Query:  
      type: object
      description: '' 
      properties:
        type:
          type: string
          example: ''
        value:
          type: string
          example: ''
        query:
          type: string
          example: ''
    QueryResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      description: '' 
      properties:
        payload:
          type: array
          items:
            type: object
            anyOf:
              - $ref: '#/components/schemas/QueryResponseObject'            
    QueryResponseObject:
      type: object
      properties:
        query_data:
          type: array
          items:
            $ref: '#/components/schemas/QueryResObject'
    QueryResObject:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/Query'
        result:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/KeyValueMap'
    KeyValueMap:
      type: object
      properties:
        key: 
          type: string
          example: ''
        value: 
          type: string
          example: ''
    UnSubscribeResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
      type: object
      properties:
        payload: 
          type: array
          items:
            $ref: '#/components/schemas/UnSubscribeObjectList'
    UnSubscribeObjectList:
      type: object
      properties:
        event:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionObject'     
    HttpStatus202:
      type: object
      description: HTTP layer error details
      properties:
        ack_status:
          type: string
          example: ''
        timestamp:       
          description: Time of message generation in RFC3339 format
          type: string
          format: date-time
        error:
          $ref: '#/components/schemas/Error'
        correlation_id:
          type: string
          example: ''
          description: ''
    HttpErrorResponse400:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-400-01'   
        error_message:
          type: string
          example: 'Bad Request'
    HttpErrorResponse401:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-401-01'   
        error_message:
          type: string
          example: 'Unauthorized' 
    HttpErrorResponse403:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-403-01'      
        error_message:
          type: string
          example: 'Forbidden'   
    HttpErrorResponse404:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-404-01'   
        error_message:
          type: string
          example: 'Not Found'
    HttpErrorResponse422:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-422-01'   
        error_message:
          type: string
          example:    
    HttpErrorResponse405:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-405-01'       
        error_message:
          type: string
          example: 'Method Not Allowed'
    HttpErrorResponse500:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
          example: 'ERR-500-01'   
        error_message:
          type: string
          example: 'Internal server error' 
  responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatus201' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpStatus201'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatus202' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpStatus202'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse400' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse400'                 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse401' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse401'                 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse403' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse403'                 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse404' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse404'                 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse405'
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse405'                 
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse422' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse422'                 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse500' 
            application/xml:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse500'                 

  securitySchemes:
    spmis_auth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT