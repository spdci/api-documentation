openapi: 3.0.3
info:
  title: Eligibity determination APIs
  description: |-
    TODO.

    _TODO_
  version: 0.0.1

servers:
  - description: Gateway endpoint
    url: https://localhost:8081/
tags:
  - name: Eligibility determination API 
    description: ''
paths:
 
  /v1/eligibility-determination:
    get:
      tags:
        - Eligibility determination API 
      summary: Get list of eligibility determination supported by registry
      description: ''
      operationId: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/SupportedEligibility'          
      security:
        - spmis_auth:
            - read:claims
    post:
      tags:
        - Eligibility determination API 
      summary: To get information of claim for person
      description: Response will contain claim details
      operationId: ''
      requestBody:
        description: send details of identifier
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EligibilityDeterminationRequest'     
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EligibilityDeterminationResponse'     
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'                 
      security:
        - spmis_auth:
            - read:relationships

components:
  parameters:
    authorization:
      name: Authorization
      in: header
      required: true
      description: Access token which was issued after successful login with gateway auth server.
      schema:
        type: string
        example: Bearer <...>        
    version:
      in: header
      name: x-api-version
      schema:
        type: string
        example: "1.0.0"
      required: false
      description: If not provided use latest api version as default
    x-timestamp:
      in: header
      name: timestamp
      schema:
        type: string
        example: "2022-12-04T18:01:07+00:00"
      required: true
      description: Timestamp of request when it was sent , ideally it should be GMT
    x-hmac:
      in: header
      name: x-hmac
      schema:
        type: string
        example: "bd4a82cd319ababe57d0a822049ae8985029f82237509d3f091c82cbc7a6945c"
      required: true
      description: Signature created in combination of {x-message-id}+{x-timestamp:}+{x-sender-id}.This is usually encrypted string using HMAC-SHA-256 algorithm with the private key.
    x-registry-type:
      in: header
      name: x-registry-type
      schema:
        type: string
        enum: ['x-mosip','x-farmer','x-social','x-crvs','x-student']
      required: true
      description: This param used to decide which service to be called to retrieve data
    x-sender-id:
      in: header
      name: x-sender-id
      schema:
        type: string
        example: "Farmer help programme "
      required: true
      description: Information about requester , it may be some code of SP system
    x-message-id:
      in: header
      name: x-message-id
      schema:
        type: string
        format: uuid
        example: 0c96614c-7255-4774-b109-cd53ee859000
      required: true
      description: UUID string to be sent in request header for tracking of request
    x-async:
      in: header
      name: x-async
      schema:
        type: string
        example: true
      required: true
      description: Async param indicate that response to be sent immediate or in call back, if _true_ send data in response if _false_ just return HTTP status 202
    x-callbackendpoint:
      in: header
      name: x-callbackendpoint
      schema:
        type: string
        example: "https://{server_url}/notify"
      required: false
      description: If async response requested then this param to be supplied for receiving data in SP system, this is usually endpoint active in SP env

  schemas:
    SupportedEligibility:
      type: object
      properties:
        claim_id:
          type: string
          format: string
        claim_type:
          type: string
          description: claim type 
          example: IS_A_FARMER
          enum: ['IS_A_FARMER']
        response_format:
          type: string
          enum: ['json','boolean','pdf','png','jpeg'] 
    EligibilityIsFarmerCheck:
      type: object
      properties:
        claim_id:
          type: string
          format: string
        claim_type:
          type: string
          description: claim type 
          example: IS_A_FARMER
          enum: ['IS_A_FARMER']
        response_format:
          type: string
          enum: ['json','boolean','pdf','png','jpeg'] 
    EligibilityDeterminationRequest:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        operations:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/EligibilityIsFarmerCheck'
        attestation:
          $ref: '#/components/schemas/EligibilityVerifier'
    EligibilityVerifier:
      type: object
      properties:
        institutation_code:
          type: string
          enum: ['GOV-AGRI-GUJ','GOV-AGRI-MH']
        institutation_name:
          type: string
          example: Department of Agricalture
    EligibilityDeterminationResponse:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        operations:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/EligibilityIsFarmerCheck'
        attestation:
          $ref: '#/components/schemas/EligibilityVerifier'
        issuance_metadata:
          type: object
          additionalProperties:
            type: string
          example:
            'FARMER_CERTIFICATE_NO': 'IN-GJ-01-23456'
            'FARMER_TYPE': 
              enum: ['owner','rented']
    Identifier:
      type: object
      properties:
        type:
          type: string
          enum: ['NATIONAL_ID','FARMER_REG_NO']
        value:
          type: string
          example: 345678912

    HttpErrorResponse:
      description: HTTP layer error details
      properties:
        error_code:
          type: string
        error_message:
          type: string
  securitySchemes:
    spmis_auth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

#    spmis_auth:
#      type: http
#      scheme: bearer
#      bearerFormat: jwt
#      flows:
#        implicit:
#          authorizationUrl: https://localhost:8081/oauth/authorize
#          scopes:
#            read:search: Allowed to perform search operation
#            read:claims: Read list of claims